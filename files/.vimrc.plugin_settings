" プラグインごとの設定

""------------------------------------
"" YankRing.vim
""------------------------------------
"" Yankの履歴参照
"nmap ,y ;YRShow<CR>


"" ------------------------------------
"" grep.vim
""------------------------------------
"" 検索外のディレクトリ、ファイルパターン
"let Grep_Skip_Dirs = '.svn .git .hg'
"let Grep_Skip_Files = '*.bak *~'


""------------------------------------
"" surround.vim
""------------------------------------
"" s, ssで選択範囲を指定文字でくくる
"nmap s <Plug>Ysurround
"nmap ss <Plug>Yssurround
"let g:surround_{char2nr('e')} = "begin \r end"
"let g:surround_{char2nr('d')} = "do \r end"
"let g:surround_{char2nr("-")} = ":\r"


""------------------------------------
"" Fugitive.vim
""------------------------------------
"nnoremap <Space>gd :<C-u>Gdiff<Enter>
"nnoremap <Space>gs :<C-u>Gstatus<Enter>
"nnoremap <Space>gl :<C-u>Glog<Enter>
"nnoremap <Space>ga :<C-u>Gwrite<Enter>
"nnoremap <Space>gc :<C-u>Gcommit<Enter>
"nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
"nnoremap <Space>gb :<C-u>Gblame<Enter>


""------------------------------------
"" vim-indent-guides
""------------------------------------
"nnoremap <silent> <Space>id :<C-u>IndentGuidesToggle<Enter>
"let g:indent_guides_auto_colors = 0
"let g:indent_guides_start_level = 4
"let g:indent_guides_guide_size = 1
"autocmd vimrc VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red ctermbg=3
"autocmd vimrc VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
"if 'dark' == &background
"    hi IndentGuidesOdd  ctermbg=black
"    hi IndentGuidesEven ctermbg=darkgrey
"else
"    hi IndentGuidesOdd  ctermbg=white
"    hi IndentGuidesEven ctermbg=lightgrey
"endif


""------------------------------------
"" smooth_scroll.vim
""------------------------------------
"map  :call SmoothScroll("d",1, 1)<CR>
"map  :call SmoothScroll("u",1, 1)<CR>


""------------------------------------
"" taglist.Vim
""------------------------------------
"" 関数一覧
"set tags=tags
""set tags+=~/.tags
""let Tlist_Ctags_Cmd = '/Applications/MacVim.app/Contents/MacOS/ctags' " ctagsのパス
"let Tlist_Show_One_File = 1               " 現在編集中のソースのタグしか表示しない
"let Tlist_Exit_OnlyWindow = 1             " taglistのウィンドーが最後のウィンドーならばVimを閉じる
"" let Tlist_Use_Right_Window = 1            " 右側でtaglistのウィンドーを表示
"let Tlist_Enable_Fold_Column = 1          " 折りたたみ
"let Tlist_Auto_Open = 1                   " 自動表示
"let Tlist_Auto_Update = 1
"let Tlist_WinWidth = 30
""map <silent> <leader>tl :Tlist<CR>        " taglistを開くショットカットキー
"nmap <F7> :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>
"nmap <Leader>tl :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>


""------------------------------------
"" open-blowser.vim
""------------------------------------
"" カーソル下のURLをブラウザで開く
"nmap <Leader>fu <Plug>(openbrowser-open)
"vmap <Leader>fu <Plug>(openbrowser-open)
"" カーソル下のキーワードをググる
"nnoremap <Leader>fs :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>


""------------------------------------
"" smartword.vim
""------------------------------------
"noremap ,w  w
"noremap ,b  b
"noremap ,e  e
"noremap ,ge  ge

"map W  <Plug>(smartword-w)
"map B  <Plug>(smartword-b)
"map E  <Plug>(smartword-e)
"map ge  <Plug>(smartword-ge)


""------------------------------------
"" camelcasemotion.vim
""------------------------------------
"" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
"map <silent> w <Plug>CamelCaseMotion_w
"map <silent> b <Plug>CamelCaseMotion_b
"map <silent> e <Plug>CamelCaseMotion_e
"" text-objectで使用できるように
"omap <silent> iw <Plug>CamelCaseMotion_iw
"xmap <silent> iw <Plug>CamelCaseMotion_iw
"omap <silent> ib <Plug>CamelCaseMotion_ib
"xmap <silent> ib <Plug>CamelCaseMotion_ib
"omap <silent> ie <Plug>CamelCaseMotion_ie
"xmap <silent> ie <Plug>CamelCaseMotion_ie


""------------------------------------
"" errormarker.vim
""------------------------------------
"" disable default shortcut mapping and re-define to <Leader>ec
"let g:errormarker_disablemappings = 1
"nmap <silent> <unique> <Leader>ec :ErrorAtCursor<CR>


"------------------------------------
" unite.vim
"------------------------------------
"" The prefix key.
"nnoremap    [unite]   <Nop>
"nmap    f [unite]
"
"nnoremap [unite]u  :<C-u>Unite -no-split<Space>
"
"" 全部乗せ
"nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -no-split -buffer-name=files buffer file_mru bookmark file<CR>
"" ファイル一覧
"nnoremap <silent> [unite]f  :<C-u>Unite -no-split -buffer-name=files file<CR>
"" バッファ一覧
"nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>
"" 常用セット
"nnoremap <silent> [unite]u  :<C-u>Unite -no-split buffer file_mru<CR>
"" 最近使用したファイル一覧
"nnoremap <silent> [unite]m  :<C-u>Unite -no-split file_mru<CR>
"" 現在のバッファのカレントディレクトリからファイル一覧
"nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -no-split file<CR>
"" snippet一覧
"nnoremap <silent> [unite]s  :<C-u>Unite snippet<CR>
"
"" nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
"
"let g:yankring_zap_keys = ""
"" from basyura/unite-rails
"nnoremap <silent> [unite]rm  :<C-u>Unite -no-split rails/model<CR>
"nnoremap <silent> [unite]rc  :<C-u>Unite -no-split rails/controller<CR>
"nnoremap <silent> [unite]rv  :<C-u>Unite -no-split rails/view<CR>
"nnoremap <silent> [unite]rl  :<C-u>Unite -no-split rails/lib<CR>
"nnoremap <silent> [unite]rj  :<C-u>Unite -no-split rails/javascript<CR>
"nnoremap <silent> [unite]rs  :<C-u>Unite -no-split rails/spec<CR>
"
"autocmd vimrc FileType unite call s:unite_my_settings()
"function! s:unite_my_settings()"{{{
"  " Overwrite settings.
"
"  " ESCキーを2回押すと終了する
"  nmap <buffer> <ESC>      <Plug>(unite_exit)
"  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
"  imap <buffer> jj      <Plug>(unite_insert_leave)
"  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
"  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
"  " Start insert.
"  let g:unite_enable_start_insert = 1
"
"  " ウィンドウを分割して開く
"  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
"  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
"
"  " ウィンドウを縦に分割して開く
"  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
"  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
"endfunction"}}}
"
"let g:unite_source_file_mru_limit = 200
"
"" unite-plugins
"cnoremap UH Unite help<Enter>
"cnoremap UO Unite outline<Enter>


""------------------------------------
"" quickrun.vim
""------------------------------------
"let g:quickrun_config = {}
"let g:quickrun_config._ = {
"  \ 'runner' : 'vimproc',
"  \ "runner/vimproc/updatetime" : 60,
"  \ 'outputter/buffer/split' : ':botright 8sp',
"  \ 'outputter/buffer/close_on_empty' : 1
"  \}

"let g:quickrun_config['rspec/bundle'] = {
"  \ 'type': 'rspec/bundle',
"  \ 'command': "rspec",
"  \ 'cmdopt': "-l %{line('.')}",
"  \ 'exec': "bundle exec %c %o %s ",
"  \ 'outputter/buffer/filetype': 'rspec-result',
"  \ 'filetype': 'rspec-result'
"  \}
"let g:quickrun_config['rspec/normal'] = {
"  \ 'type': 'rspec/normal',
"  \ 'command': "rspec",
"  \ 'cmdopt': "-l %{line('.')}",
"  \ 'exec': '%c %o %s',
"  \ 'outputter/buffer/filetype': 'rspec-result',
"  \ 'filetype': 'rspec-result'
"  \}
"function! RSpecQuickrun()
"  let b:quickrun_config = {'type' : 'rspec/bundle'}
"endfunction

"" <C-c> で実行を強制終了させる
"" quickrun.vim が実行していない場合には <C-c> を呼び出す
"nnoremap <expr><silent> <C-c> quickrun#is_running() ?  quickrun#sweep_sessions() : "\<C-c>"

"autocmd vimrc BufReadPost *_spec.rb call RSpecQuickrun()
""------------------------------------
"" Pydiction
""------------------------------------
"let g:pydiction_location = '~/.vim/bundle/pydiction/complete-dict'
