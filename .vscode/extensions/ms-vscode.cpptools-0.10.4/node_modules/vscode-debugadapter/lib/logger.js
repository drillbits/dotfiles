/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var fs = require('fs');
var debugSession_1 = require('./debugSession');
(function (LogLevel) {
    LogLevel[LogLevel["Verbose"] = 0] = "Verbose";
    LogLevel[LogLevel["Log"] = 1] = "Log";
    LogLevel[LogLevel["Error"] = 2] = "Error";
})(exports.LogLevel || (exports.LogLevel = {}));
var LogLevel = exports.LogLevel;
/** Logger singleton */
var _logger;
var _pendingLogQ = [];
function log(msg, forceLog, level) {
    if (forceLog === void 0) { forceLog = false; }
    if (level === void 0) { level = LogLevel.Log; }
    msg = msg + '\n';
    write(msg, forceLog, level);
}
exports.log = log;
function verbose(msg) {
    log(msg, undefined, LogLevel.Verbose);
}
exports.verbose = verbose;
function error(msg, forceLog) {
    if (forceLog === void 0) { forceLog = true; }
    log(msg, forceLog, LogLevel.Error);
}
exports.error = error;
/**
 * `log` adds a newline, this one doesn't
 */
function write(msg, forceLog, level) {
    if (forceLog === void 0) { forceLog = false; }
    if (level === void 0) { level = LogLevel.Log; }
    // [null, undefined] => string
    msg = msg + '';
    if (_pendingLogQ) {
        _pendingLogQ.push({ msg: msg, level: level });
    }
    else {
        _logger.log(msg, level, forceLog);
    }
}
/**
 * Set the logger's minimum level to log. Log messages are queued before this is
 * called the first time, because minLogLevel defaults to Error.
 */
function setMinLogLevel(logLevel) {
    if (_logger) {
        _logger.minLogLevel = logLevel;
        // Clear out the queue of pending messages
        if (_pendingLogQ) {
            var logQ = _pendingLogQ;
            _pendingLogQ = null;
            logQ.forEach(function (item) { return write(item.msg, undefined, item.level); });
        }
    }
}
exports.setMinLogLevel = setMinLogLevel;
function init(logCallback, logFilePath, logToConsole) {
    // Re-init, create new global Logger
    _pendingLogQ = [];
    _logger = new Logger(logCallback, logFilePath, logToConsole);
    if (logFilePath) {
        log("Verbose logs are written to:");
        log(logFilePath);
        var d = new Date();
        var timestamp = d.toLocaleTimeString() + ', ' + d.toLocaleDateString();
        verbose(timestamp);
    }
}
exports.init = init;
/**
 * Manages logging, whether to console.log, file, or VS Code console.
 */
var Logger = (function () {
    function Logger(logCallback, logFilePath, isServer) {
        this._logCallback = logCallback;
        this._logFilePath = logFilePath;
        this._logToConsole = isServer;
        this.minLogLevel = LogLevel.Error;
    }
    Object.defineProperty(Logger.prototype, "minLogLevel", {
        get: function () { return this._minLogLevel; },
        set: function (logLevel) {
            var _this = this;
            this._minLogLevel = logLevel;
            // Open a log file in the specified location. Overwritten on each run.
            if (logLevel < LogLevel.Error && this._logFilePath) {
                this._logFileStream = fs.createWriteStream(this._logFilePath);
                this._logFileStream.on('error', function (e) {
                    _this.sendLog("Error involving log file at path: " + _this._logFilePath + ". Error: " + e.toString(), LogLevel.Error);
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param forceLog - Writes to the diagnostic logging channel, even if diagnostic logging is not enabled.
     *      (For messages that appear whether logging is enabled or not.)
     */
    Logger.prototype.log = function (msg, level, forceLog) {
        if (level >= this.minLogLevel || forceLog) {
            this.sendLog(msg, level);
        }
        if (this._logToConsole) {
            var logFn = level === LogLevel.Error ? console.error : console.log;
            logFn(trimLastNewline(msg));
        }
        // If an error, prepend with '[Error]'
        if (level === LogLevel.Error) {
            msg = "[" + LogLevel[level] + "] " + msg;
        }
        if (this._logFileStream) {
            this._logFileStream.write(msg);
        }
    };
    Logger.prototype.sendLog = function (msg, level) {
        // Truncate long messages, they can hang VS Code
        if (msg.length > 1500) {
            var endsInNewline = !!msg.match(/(\n|\r\n)$/);
            msg = msg.substr(0, 1500) + '[...]';
            if (endsInNewline) {
                msg = msg + '\n';
            }
        }
        if (this._logCallback) {
            var event_1 = new LogOutputEvent(msg, level);
            this._logCallback(event_1);
        }
    };
    return Logger;
}());
var LogOutputEvent = (function (_super) {
    __extends(LogOutputEvent, _super);
    function LogOutputEvent(msg, level) {
        _super.call(this, msg, level === LogLevel.Error ? 'stderr' : 'console');
    }
    return LogOutputEvent;
}(debugSession_1.OutputEvent));
exports.LogOutputEvent = LogOutputEvent;
function trimLastNewline(str) {
    return str.replace(/(\n|\r\n)$/, '');
}
exports.trimLastNewline = trimLastNewline;
//# sourceMappingURL=data:application/json;base64,