import { RequestType, ResponseError, ErrorCodes, NotificationType } from './messages';
import { IMessageReader, DataCallback, StreamMessageReader, IPCMessageReader } from './messageReader';
import { IMessageWriter, StreamMessageWriter, IPCMessageWriter } from './messageWriter';
export { ErrorCodes, ResponseError, RequestType, NotificationType, IMessageReader, DataCallback, StreamMessageReader, IPCMessageReader, IMessageWriter, StreamMessageWriter, IPCMessageWriter };
export interface IRequestHandler<P, R, E> {
    (params?: P): R | ResponseError<E> | Thenable<R | ResponseError<E>>;
}
export interface INotificationHandler<P> {
    (params?: P): void;
}
export interface ILogger {
    error(message: string): any;
    warn(message: string): any;
    info(message: string): any;
    log(message: string): any;
}
export interface MessageConnection {
    sendRequest<P, R, E>(type: RequestType<P, R, E>, params?: P): Thenable<R>;
    onRequest<P, R, E>(type: RequestType<P, R, E>, handler: IRequestHandler<P, R, E>): void;
    sendNotification<P>(type: NotificationType<P>, params?: P): void;
    onNotification<P>(type: NotificationType<P>, handler: INotificationHandler<P>): void;
    listen(): any;
    dispose(): void;
}
export interface ServerMessageConnection extends MessageConnection {
}
export interface ClientMessageConnection extends MessageConnection {
}
export declare function createServerMessageConnection(reader: IMessageReader, writer: IMessageWriter, logger: ILogger): ServerMessageConnection;
export declare function createServerMessageConnection(inputStream: NodeJS.ReadableStream, outputStream: NodeJS.WritableStream, logger: ILogger): ServerMessageConnection;
export declare function createClientMessageConnection(reader: IMessageReader, writer: IMessageWriter, logger: ILogger): ClientMessageConnection;
export declare function createClientMessageConnection(inputStream: NodeJS.ReadableStream, outputStream: NodeJS.WritableStream, logger: ILogger): ClientMessageConnection;
