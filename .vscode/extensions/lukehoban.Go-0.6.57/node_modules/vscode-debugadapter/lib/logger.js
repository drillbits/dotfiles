/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var fs = require('fs');
var debugSession_1 = require('./debugSession');
(function (LogLevel) {
    LogLevel[LogLevel["Verbose"] = 0] = "Verbose";
    LogLevel[LogLevel["Log"] = 1] = "Log";
    LogLevel[LogLevel["Warn"] = 2] = "Warn";
    LogLevel[LogLevel["Error"] = 3] = "Error";
})(exports.LogLevel || (exports.LogLevel = {}));
var LogLevel = exports.LogLevel;
/** Logger singleton */
var _logger;
var _pendingLogQ = [];
function log(msg, level) {
    if (level === void 0) { level = LogLevel.Log; }
    msg = msg + '\n';
    write(msg, level);
}
exports.log = log;
function verbose(msg) {
    log(msg, LogLevel.Verbose);
}
exports.verbose = verbose;
function warn(msg) {
    log(msg, LogLevel.Warn);
}
exports.warn = warn;
function error(msg) {
    log(msg, LogLevel.Error);
}
exports.error = error;
/**
 * `log` adds a newline, this one doesn't
 */
function write(msg, level) {
    if (level === void 0) { level = LogLevel.Log; }
    // [null, undefined] => string
    msg = msg + '';
    if (_pendingLogQ) {
        _pendingLogQ.push({ msg: msg, level: level });
    }
    else {
        _logger.log(msg, level);
    }
}
/**
 * Set the logger's minimum level to log in the console, and whether to log to the file. Log messages are queued before this is
 * called the first time, because minLogLevel defaults to Warn.
 */
function setup(consoleMinLogLevel, logToFile) {
    if (_logger) {
        _logger.setup(consoleMinLogLevel, logToFile);
        // Now that we have a minimum logLevel, we can clear out the queue of pending messages
        if (_pendingLogQ) {
            var logQ = _pendingLogQ;
            _pendingLogQ = null;
            logQ.forEach(function (item) { return write(item.msg, item.level); });
        }
    }
}
exports.setup = setup;
function init(logCallback, logFilePath, logToConsole) {
    // Re-init, create new global Logger
    _pendingLogQ = _pendingLogQ || [];
    _logger = new Logger(logCallback, logFilePath, logToConsole);
    if (logFilePath) {
        var d = new Date();
        var timestamp = d.toLocaleTimeString() + ', ' + d.toLocaleDateString();
        verbose(timestamp);
    }
}
exports.init = init;
/**
 * Manages logging, whether to console.log, file, or VS Code console.
 */
var Logger = (function () {
    function Logger(logCallback, logFilePath, isServer) {
        this._logCallback = logCallback;
        this._logFilePath = logFilePath;
        this._logToConsole = isServer;
        this._minLogLevel = LogLevel.Warn;
    }
    Logger.prototype.setup = function (consoleMinLogLevel, logToFile) {
        var _this = this;
        this._minLogLevel = consoleMinLogLevel;
        // Open a log file in the specified location. Overwritten on each run.
        if (logToFile) {
            this.log("Verbose logs are written to:", LogLevel.Warn);
            this.log(this._logFilePath, LogLevel.Warn);
            this._logFileStream = fs.createWriteStream(this._logFilePath);
            this._logFileStream.on('error', function (e) {
                _this.sendLog("Error involving log file at path: " + _this._logFilePath + ". Error: " + e.toString(), LogLevel.Error);
            });
        }
    };
    Logger.prototype.log = function (msg, level) {
        if (level >= this._minLogLevel) {
            this.sendLog(msg, level);
        }
        if (this._logToConsole) {
            var logFn = level === LogLevel.Error ? console.error :
                level === LogLevel.Warn ? console.warn :
                    console.log;
            logFn(trimLastNewline(msg));
        }
        // If an error, prepend with '[Error]'
        if (level === LogLevel.Error) {
            msg = "[" + LogLevel[level] + "] " + msg;
        }
        if (this._logFileStream) {
            this._logFileStream.write(msg);
        }
    };
    Logger.prototype.sendLog = function (msg, level) {
        // Truncate long messages, they can hang VS Code
        if (msg.length > 1500) {
            var endsInNewline = !!msg.match(/(\n|\r\n)$/);
            msg = msg.substr(0, 1500) + '[...]';
            if (endsInNewline) {
                msg = msg + '\n';
            }
        }
        if (this._logCallback) {
            var event_1 = new LogOutputEvent(msg, level);
            this._logCallback(event_1);
        }
    };
    return Logger;
}());
var LogOutputEvent = (function (_super) {
    __extends(LogOutputEvent, _super);
    function LogOutputEvent(msg, level) {
        var category = level === LogLevel.Error ? 'stderr' :
            level === LogLevel.Warn ? 'console' :
                'stdout';
        _super.call(this, msg, category);
    }
    return LogOutputEvent;
}(debugSession_1.OutputEvent));
exports.LogOutputEvent = LogOutputEvent;
function trimLastNewline(str) {
    return str.replace(/(\n|\r\n)$/, '');
}
exports.trimLastNewline = trimLastNewline;
//# sourceMappingURL=data:application/json;base64,