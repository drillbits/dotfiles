/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWdQcm90b2NvbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWJ1Z1Byb3RvY29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Z0dBR2dHO0FBRWhHLFlBQVksQ0FBQztBQWt6Q1oiLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKiogRGVjbGFyYXRpb24gbW9kdWxlIGRlc2NyaWJpbmcgdGhlIFZTIENvZGUgZGVidWcgcHJvdG9jb2wuXG5cdEF1dG8tZ2VuZXJhdGVkIGZyb20ganNvbiBzY2hlbWEuIERvIG5vdCBlZGl0IG1hbnVhbGx5LlxuKi9cbmV4cG9ydCBtb2R1bGUgRGVidWdQcm90b2NvbCB7XG5cblx0LyoqIEJhc2UgY2xhc3Mgb2YgcmVxdWVzdHMsIHJlc3BvbnNlcywgYW5kIGV2ZW50cy4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBQcm90b2NvbE1lc3NhZ2Uge1xuXHRcdC8qKiBTZXF1ZW5jZSBudW1iZXIuICovXG5cdFx0c2VxOiBudW1iZXI7XG5cdFx0LyoqIE9uZSBvZiAncmVxdWVzdCcsICdyZXNwb25zZScsIG9yICdldmVudCcuICovXG5cdFx0dHlwZTogc3RyaW5nO1xuXHR9XG5cblx0LyoqIEEgY2xpZW50IG9yIHNlcnZlci1pbml0aWF0ZWQgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0IGV4dGVuZHMgUHJvdG9jb2xNZXNzYWdlIHtcblx0XHQvLyB0eXBlOiAncmVxdWVzdCc7XG5cdFx0LyoqIFRoZSBjb21tYW5kIHRvIGV4ZWN1dGUuICovXG5cdFx0Y29tbWFuZDogc3RyaW5nO1xuXHRcdC8qKiBPYmplY3QgY29udGFpbmluZyBhcmd1bWVudHMgZm9yIHRoZSBjb21tYW5kLiAqL1xuXHRcdGFyZ3VtZW50cz86IGFueTtcblx0fVxuXG5cdC8qKiBTZXJ2ZXItaW5pdGlhdGVkIGV2ZW50LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEV2ZW50IGV4dGVuZHMgUHJvdG9jb2xNZXNzYWdlIHtcblx0XHQvLyB0eXBlOiAnZXZlbnQnO1xuXHRcdC8qKiBUeXBlIG9mIGV2ZW50LiAqL1xuXHRcdGV2ZW50OiBzdHJpbmc7XG5cdFx0LyoqIEV2ZW50LXNwZWNpZmljIGluZm9ybWF0aW9uLiAqL1xuXHRcdGJvZHk/OiBhbnk7XG5cdH1cblxuXHQvKiogUmVzcG9uc2UgdG8gYSByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlIGV4dGVuZHMgUHJvdG9jb2xNZXNzYWdlIHtcblx0XHQvLyB0eXBlOiAncmVzcG9uc2UnO1xuXHRcdC8qKiBTZXF1ZW5jZSBudW1iZXIgb2YgdGhlIGNvcnJlc3BvbmRpbmcgcmVxdWVzdC4gKi9cblx0XHRyZXF1ZXN0X3NlcTogbnVtYmVyO1xuXHRcdC8qKiBPdXRjb21lIG9mIHRoZSByZXF1ZXN0LiAqL1xuXHRcdHN1Y2Nlc3M6IGJvb2xlYW47XG5cdFx0LyoqIFRoZSBjb21tYW5kIHJlcXVlc3RlZC4gKi9cblx0XHRjb21tYW5kOiBzdHJpbmc7XG5cdFx0LyoqIENvbnRhaW5zIGVycm9yIG1lc3NhZ2UgaWYgc3VjY2VzcyA9PSBmYWxzZS4gKi9cblx0XHRtZXNzYWdlPzogc3RyaW5nO1xuXHRcdC8qKiBDb250YWlucyByZXF1ZXN0IHJlc3VsdCBpZiBzdWNjZXNzIGlzIHRydWUgYW5kIG9wdGlvbmFsIGVycm9yIGRldGFpbHMgaWYgc3VjY2VzcyBpcyBmYWxzZS4gKi9cblx0XHRib2R5PzogYW55O1xuXHR9XG5cblx0LyoqIEV2ZW50IG1lc3NhZ2UgZm9yICdpbml0aWFsaXplZCcgZXZlbnQgdHlwZS5cblx0XHRUaGlzIGV2ZW50IGluZGljYXRlcyB0aGF0IHRoZSBkZWJ1ZyBhZGFwdGVyIGlzIHJlYWR5IHRvIGFjY2VwdCBjb25maWd1cmF0aW9uIHJlcXVlc3RzIChlLmcuIFNldEJyZWFrcG9pbnRzUmVxdWVzdCwgU2V0RXhjZXB0aW9uQnJlYWtwb2ludHNSZXF1ZXN0KS5cblx0XHRBIGRlYnVnIGFkYXB0ZXIgaXMgZXhwZWN0ZWQgdG8gc2VuZCB0aGlzIGV2ZW50IHdoZW4gaXQgaXMgcmVhZHkgdG8gYWNjZXB0IGNvbmZpZ3VyYXRpb24gcmVxdWVzdHMgKGJ1dCBub3QgYmVmb3JlIHRoZSBJbml0aWFsaXplUmVxdWVzdCBoYXMgZmluaXNoZWQpLlxuXHRcdFRoZSBzZXF1ZW5jZSBvZiBldmVudHMvcmVxdWVzdHMgaXMgYXMgZm9sbG93czpcblx0XHQtIGFkYXB0ZXJzIHNlbmRzIEluaXRpYWxpemVkRXZlbnQgKGFmdGVyIHRoZSBJbml0aWFsaXplUmVxdWVzdCBoYXMgcmV0dXJuZWQpXG5cdFx0LSBmcm9udGVuZCBzZW5kcyB6ZXJvIG9yIG1vcmUgU2V0QnJlYWtwb2ludHNSZXF1ZXN0XG5cdFx0LSBmcm9udGVuZCBzZW5kcyBvbmUgU2V0RnVuY3Rpb25CcmVha3BvaW50c1JlcXVlc3Rcblx0XHQtIGZyb250ZW5kIHNlbmRzIGEgU2V0RXhjZXB0aW9uQnJlYWtwb2ludHNSZXF1ZXN0IGlmIG9uZSBvciBtb3JlIGV4Y2VwdGlvbkJyZWFrcG9pbnRGaWx0ZXJzIGhhdmUgYmVlbiBkZWZpbmVkIChvciBpZiBzdXBwb3J0c0NvbmZpZ3VyYXRpb25Eb25lUmVxdWVzdCBpcyBub3QgZGVmaW5lZCBvciBmYWxzZSlcblx0XHQtIGZyb250ZW5kIHNlbmRzIG90aGVyIGZ1dHVyZSBjb25maWd1cmF0aW9uIHJlcXVlc3RzXG5cdFx0LSBmcm9udGVuZCBzZW5kcyBvbmUgQ29uZmlndXJhdGlvbkRvbmVSZXF1ZXN0IHRvIGluZGljYXRlIHRoZSBlbmQgb2YgdGhlIGNvbmZpZ3VyYXRpb25cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBJbml0aWFsaXplZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuXHRcdC8vIGV2ZW50OiAnaW5pdGlhbGl6ZWQnO1xuXHR9XG5cblx0LyoqIEV2ZW50IG1lc3NhZ2UgZm9yICdzdG9wcGVkJyBldmVudCB0eXBlLlxuXHRcdFRoZSBldmVudCBpbmRpY2F0ZXMgdGhhdCB0aGUgZXhlY3V0aW9uIG9mIHRoZSBkZWJ1Z2dlZSBoYXMgc3RvcHBlZCBkdWUgdG8gc29tZSBjb25kaXRpb24uXG5cdFx0VGhpcyBjYW4gYmUgY2F1c2VkIGJ5IGEgYnJlYWsgcG9pbnQgcHJldmlvdXNseSBzZXQsIGEgc3RlcHBpbmcgYWN0aW9uIGhhcyBjb21wbGV0ZWQsIGJ5IGV4ZWN1dGluZyBhIGRlYnVnZ2VyIHN0YXRlbWVudCBldGMuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RvcHBlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuXHRcdC8vIGV2ZW50OiAnc3RvcHBlZCc7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIFRoZSByZWFzb24gZm9yIHRoZSBldmVudCAoc3VjaCBhczogJ3N0ZXAnLCAnYnJlYWtwb2ludCcsICdleGNlcHRpb24nLCAncGF1c2UnKS4gVGhpcyBzdHJpbmcgaXMgc2hvd24gaW4gdGhlIFVJLiAqL1xuXHRcdFx0cmVhc29uOiBzdHJpbmc7XG5cdFx0XHQvKiogVGhlIHRocmVhZCB3aGljaCB3YXMgc3RvcHBlZC4gKi9cblx0XHRcdHRocmVhZElkPzogbnVtYmVyO1xuXHRcdFx0LyoqIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24uIEUuZy4gaWYgcmVhc29uIGlzICdleGNlcHRpb24nLCB0ZXh0IGNvbnRhaW5zIHRoZSBleGNlcHRpb24gbmFtZS4gVGhpcyBzdHJpbmcgaXMgc2hvd24gaW4gdGhlIFVJLiAqL1xuXHRcdFx0dGV4dD86IHN0cmluZztcblx0XHRcdC8qKiBJZiBhbGxUaHJlYWRzU3RvcHBlZCBpcyB0cnVlLCBhIGRlYnVnIGFkYXB0ZXIgY2FuIGFubm91bmNlIHRoYXQgYWxsIHRocmVhZHMgaGF2ZSBzdG9wcGVkLlxuXHRcdFx0XHQqICBUaGUgY2xpZW50IHNob3VsZCB1c2UgdGhpcyBpbmZvcm1hdGlvbiB0byBlbmFibGUgdGhhdCBhbGwgdGhyZWFkcyBjYW4gYmUgZXhwYW5kZWQgdG8gYWNjZXNzIHRoZWlyIHN0YWNrdHJhY2VzLlxuXHRcdFx0XHQqICBJZiB0aGUgYXR0cmlidXRlIGlzIG1pc3Npbmcgb3IgZmFsc2UsIG9ubHkgdGhlIHRocmVhZCB3aXRoIHRoZSBnaXZlbiB0aHJlYWRJZCBjYW4gYmUgZXhwYW5kZWQuXG5cdFx0XHQqL1xuXHRcdFx0YWxsVGhyZWFkc1N0b3BwZWQ/OiBib29sZWFuO1xuXHRcdH07XG5cdH1cblxuXHQvKiogRXZlbnQgbWVzc2FnZSBmb3IgJ2NvbnRpbnVlZCcgZXZlbnQgdHlwZS5cblx0XHRUaGUgZXZlbnQgaW5kaWNhdGVzIHRoYXQgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZGVidWdnZWUgaGFzIGNvbnRpbnVlZC5cblx0XHRQbGVhc2Ugbm90ZTogYSBkZWJ1ZyBhZGFwdGVyIGlzIG5vdCBleHBlY3RlZCB0byBzZW5kIHRoaXMgZXZlbnQgaW4gcmVzcG9uc2UgdG8gYSByZXF1ZXN0IHRoYXQgaW1wbGllcyB0aGF0IGV4ZWN1dGlvbiBjb250aW51ZXMsIGUuZy4gJ2xhdW5jaCcgb3IgJ2NvbnRpbnVlJy5cblx0XHRJdCBpcyBvbmx5IG5lY2Vzc2FyeSB0byBzZW5kIGEgQ29udGludWVkRXZlbnQgaWYgdGhlcmUgd2FzIG5vIHByZXZpb3VzIHJlcXVlc3QgdGhhdCBpbXBsaWVkIHRoaXMuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29udGludWVkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG5cdFx0Ly8gZXZlbnQ6ICdjb250aW51ZWQnO1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBUaGUgdGhyZWFkIHdoaWNoIHdhcyBjb250aW51ZWQuICovXG5cdFx0XHR0aHJlYWRJZDogbnVtYmVyO1xuXHRcdFx0LyoqIElmIGFsbFRocmVhZHNDb250aW51ZWQgaXMgdHJ1ZSwgYSBkZWJ1ZyBhZGFwdGVyIGNhbiBhbm5vdW5jZSB0aGF0IGFsbCB0aHJlYWRzIGhhdmUgY29udGludWVkLiAqL1xuXHRcdFx0YWxsVGhyZWFkc0NvbnRpbnVlZD86IGJvb2xlYW47XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBFdmVudCBtZXNzYWdlIGZvciAnZXhpdGVkJyBldmVudCB0eXBlLlxuXHRcdFRoZSBldmVudCBpbmRpY2F0ZXMgdGhhdCB0aGUgZGVidWdnZWUgaGFzIGV4aXRlZC5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBFeGl0ZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcblx0XHQvLyBldmVudDogJ2V4aXRlZCc7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIFRoZSBleGl0IGNvZGUgcmV0dXJuZWQgZnJvbSB0aGUgZGVidWdnZWUuICovXG5cdFx0XHRleGl0Q29kZTogbnVtYmVyO1xuXHRcdH07XG5cdH1cblxuXHQvKiogRXZlbnQgbWVzc2FnZSBmb3IgJ3Rlcm1pbmF0ZWQnIGV2ZW50IHR5cGVzLlxuXHRcdFRoZSBldmVudCBpbmRpY2F0ZXMgdGhhdCBkZWJ1Z2dpbmcgb2YgdGhlIGRlYnVnZ2VlIGhhcyB0ZXJtaW5hdGVkLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFRlcm1pbmF0ZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcblx0XHQvLyBldmVudDogJ3Rlcm1pbmF0ZWQnO1xuXHRcdGJvZHk/OiB7XG5cdFx0XHQvKiogQSBkZWJ1ZyBhZGFwdGVyIG1heSBzZXQgJ3Jlc3RhcnQnIHRvIHRydWUgdG8gcmVxdWVzdCB0aGF0IHRoZSBmcm9udCBlbmQgcmVzdGFydHMgdGhlIHNlc3Npb24uICovXG5cdFx0XHRyZXN0YXJ0PzogYm9vbGVhbjtcblx0XHR9O1xuXHR9XG5cblx0LyoqIEV2ZW50IG1lc3NhZ2UgZm9yICd0aHJlYWQnIGV2ZW50IHR5cGUuXG5cdFx0VGhlIGV2ZW50IGluZGljYXRlcyB0aGF0IGEgdGhyZWFkIGhhcyBzdGFydGVkIG9yIGV4aXRlZC5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBUaHJlYWRFdmVudCBleHRlbmRzIEV2ZW50IHtcblx0XHQvLyBldmVudDogJ3RocmVhZCc7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIFRoZSByZWFzb24gZm9yIHRoZSBldmVudCAoc3VjaCBhczogJ3N0YXJ0ZWQnLCAnZXhpdGVkJykuICovXG5cdFx0XHRyZWFzb246IHN0cmluZztcblx0XHRcdC8qKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgdGhyZWFkLiAqL1xuXHRcdFx0dGhyZWFkSWQ6IG51bWJlcjtcblx0XHR9O1xuXHR9XG5cblx0LyoqIEV2ZW50IG1lc3NhZ2UgZm9yICdvdXRwdXQnIGV2ZW50IHR5cGUuXG5cdFx0VGhlIGV2ZW50IGluZGljYXRlcyB0aGF0IHRoZSB0YXJnZXQgaGFzIHByb2R1Y2VkIHNvbWUgb3V0cHV0LlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIE91dHB1dEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuXHRcdC8vIGV2ZW50OiAnb3V0cHV0Jztcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogVGhlIGNhdGVnb3J5IG9mIG91dHB1dCAoc3VjaCBhczogJ2NvbnNvbGUnLCAnc3Rkb3V0JywgJ3N0ZGVycicsICd0ZWxlbWV0cnknKS4gSWYgbm90IHNwZWNpZmllZCwgJ2NvbnNvbGUnIGlzIGFzc3VtZWQuICovXG5cdFx0XHRjYXRlZ29yeT86IHN0cmluZztcblx0XHRcdC8qKiBUaGUgb3V0cHV0IHRvIHJlcG9ydC4gKi9cblx0XHRcdG91dHB1dDogc3RyaW5nO1xuXHRcdFx0LyoqIElmIGFuIGF0dHJpYnV0ZSAndmFyaWFibGVzUmVmZXJlbmNlJyBleGlzdHMgYW5kIGl0cyB2YWx1ZSBpcyA+IDAsIHRoZSBvdXRwdXQgY29udGFpbnMgb2JqZWN0cyB3aGljaCBjYW4gYmUgcmV0cmlldmVkIGJ5IHBhc3NpbmcgdmFyaWFibGVzUmVmZXJlbmNlIHRvIHRoZSBWYXJpYWJsZXNSZXF1ZXN0LiAqL1xuXHRcdFx0dmFyaWFibGVzUmVmZXJlbmNlPzogbnVtYmVyO1xuXHRcdFx0LyoqIE9wdGlvbmFsIGRhdGEgdG8gcmVwb3J0LiBGb3IgdGhlICd0ZWxlbWV0cnknIGNhdGVnb3J5IHRoZSBkYXRhIHdpbGwgYmUgc2VudCB0byB0ZWxlbWV0cnksIGZvciB0aGUgb3RoZXIgY2F0ZWdvcmllcyB0aGUgZGF0YSBpcyBzaG93biBpbiBKU09OIGZvcm1hdC4gKi9cblx0XHRcdGRhdGE/OiBhbnk7XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBFdmVudCBtZXNzYWdlIGZvciAnYnJlYWtwb2ludCcgZXZlbnQgdHlwZS5cblx0XHRUaGUgZXZlbnQgaW5kaWNhdGVzIHRoYXQgc29tZSBpbmZvcm1hdGlvbiBhYm91dCBhIGJyZWFrcG9pbnQgaGFzIGNoYW5nZWQuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQnJlYWtwb2ludEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuXHRcdC8vIGV2ZW50OiAnYnJlYWtwb2ludCc7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIFRoZSByZWFzb24gZm9yIHRoZSBldmVudCAoc3VjaCBhczogJ2NoYW5nZWQnLCAnbmV3JykuICovXG5cdFx0XHRyZWFzb246IHN0cmluZztcblx0XHRcdC8qKiBUaGUgYnJlYWtwb2ludC4gKi9cblx0XHRcdGJyZWFrcG9pbnQ6IEJyZWFrcG9pbnQ7XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBFdmVudCBtZXNzYWdlIGZvciAnbW9kdWxlJyBldmVudCB0eXBlLlxuXHRcdFRoZSBldmVudCBpbmRpY2F0ZXMgdGhhdCBzb21lIGluZm9ybWF0aW9uIGFib3V0IGEgbW9kdWxlIGhhcyBjaGFuZ2VkLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIE1vZHVsZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xuXHRcdC8vIGV2ZW50OiAnbW9kdWxlJztcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogVGhlIHJlYXNvbiBmb3IgdGhlIGV2ZW50LiAqL1xuXHRcdFx0cmVhc29uOiAnbmV3JyB8ICdjaGFuZ2VkJyB8ICdyZW1vdmVkJztcblx0XHRcdC8qKiBUaGUgbmV3LCBjaGFuZ2VkLCBvciByZW1vdmVkIG1vZHVsZS4gSW4gY2FzZSBvZiAncmVtb3ZlZCcgb25seSB0aGUgbW9kdWxlIGlkIGlzIHVzZWQuICovXG5cdFx0XHRtb2R1bGU6IE1vZHVsZTtcblx0XHR9O1xuXHR9XG5cblx0LyoqIHJ1bkluVGVybWluYWwgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyAncnVuSW5UZXJtaW5hbCcuXG5cdFx0V2l0aCB0aGlzIHJlcXVlc3QgYSBkZWJ1ZyBhZGFwdGVyIGNhbiBydW4gYSBjb21tYW5kIGluIGEgdGVybWluYWwuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgUnVuSW5UZXJtaW5hbFJlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHQvLyBjb21tYW5kOiAncnVuSW5UZXJtaW5hbCc7XG5cdFx0YXJndW1lbnRzOiBSdW5JblRlcm1pbmFsUmVxdWVzdEFyZ3VtZW50cztcblx0fVxuXG5cdC8qKiBBcmd1bWVudHMgZm9yICdydW5JblRlcm1pbmFsJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFJ1bkluVGVybWluYWxSZXF1ZXN0QXJndW1lbnRzIHtcblx0XHQvKiogV2hhdCBraW5kIG9mIHRlcm1pbmFsIHRvIGxhdW5jaC4gKi9cblx0XHRraW5kPzogJ2ludGVncmF0ZWQnIHwgJ2V4dGVybmFsJztcblx0XHQvKiogT3B0aW9uYWwgdGl0bGUgb2YgdGhlIHRlcm1pbmFsLiAqL1xuXHRcdHRpdGxlPzogc3RyaW5nO1xuXHRcdC8qKiBXb3JraW5nIGRpcmVjdG9yeSBvZiB0aGUgY29tbWFuZC4gKi9cblx0XHRjd2Q6IHN0cmluZztcblx0XHQvKiogTGlzdCBvZiBhcmd1bWVudHMuIFRoZSBmaXJzdCBhcmd1bWVudCBpcyB0aGUgY29tbWFuZCB0byBydW4uICovXG5cdFx0YXJnczogc3RyaW5nW107XG5cdFx0LyoqIEVudmlyb25tZW50IGtleS12YWx1ZSBwYWlycyB0aGF0IGFyZSBhZGRlZCB0byB0aGUgZGVmYXVsdCBlbnZpcm9ubWVudC4gKi9cblx0XHRlbnY/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZzsgfTtcblx0fVxuXG5cdC8qKiBSZXNwb25zZSB0byBJbml0aWFsaXplIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgUnVuSW5UZXJtaW5hbFJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBUaGUgcHJvY2VzcyBJRC4gKi9cblx0XHRcdHByb2Nlc3NJZD86IG51bWJlcjtcblx0XHR9O1xuXHR9XG5cblx0LyoqIE9uIGVycm9yIHRoYXQgaXMgd2hlbmV2ZXIgJ3N1Y2Nlc3MnIGlzIGZhbHNlLCB0aGUgYm9keSBjYW4gcHJvdmlkZSBtb3JlIGRldGFpbHMuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgRXJyb3JSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogQW4gb3B0aW9uYWwsIHN0cnVjdHVyZWQgZXJyb3IgbWVzc2FnZS4gKi9cblx0XHRcdGVycm9yPzogTWVzc2FnZTtcblx0XHR9O1xuXHR9XG5cblx0LyoqIEluaXRpYWxpemUgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyAnaW5pdGlhbGl6ZScuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgSW5pdGlhbGl6ZVJlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHQvLyBjb21tYW5kOiAnaW5pdGlhbGl6ZSc7XG5cdFx0YXJndW1lbnRzOiBJbml0aWFsaXplUmVxdWVzdEFyZ3VtZW50cztcblx0fVxuXG5cdC8qKiBBcmd1bWVudHMgZm9yICdpbml0aWFsaXplJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEluaXRpYWxpemVSZXF1ZXN0QXJndW1lbnRzIHtcblx0XHQvKiogVGhlIElEIG9mIHRoZSAoZnJvbnRlbmQpIGNsaWVudCB1c2luZyB0aGlzIGFkYXB0ZXIuICovXG5cdFx0Y2xpZW50SUQ/OiBzdHJpbmc7XG5cdFx0LyoqIFRoZSBJRCBvZiB0aGUgZGVidWcgYWRhcHRlci4gKi9cblx0XHRhZGFwdGVySUQ6IHN0cmluZztcblx0XHQvKiogSWYgdHJ1ZSBhbGwgbGluZSBudW1iZXJzIGFyZSAxLWJhc2VkIChkZWZhdWx0KS4gKi9cblx0XHRsaW5lc1N0YXJ0QXQxPzogYm9vbGVhbjtcblx0XHQvKiogSWYgdHJ1ZSBhbGwgY29sdW1uIG51bWJlcnMgYXJlIDEtYmFzZWQgKGRlZmF1bHQpLiAqL1xuXHRcdGNvbHVtbnNTdGFydEF0MT86IGJvb2xlYW47XG5cdFx0LyoqIERldGVybWluZXMgaW4gd2hhdCBmb3JtYXQgcGF0aHMgYXJlIHNwZWNpZmllZC4gUG9zc2libGUgdmFsdWVzIGFyZSAncGF0aCcgb3IgJ3VyaScuIFRoZSBkZWZhdWx0IGlzICdwYXRoJywgd2hpY2ggaXMgdGhlIG5hdGl2ZSBmb3JtYXQuICovXG5cdFx0cGF0aEZvcm1hdD86IHN0cmluZztcblx0XHQvKiogQ2xpZW50IHN1cHBvcnRzIHRoZSBvcHRpb25hbCB0eXBlIGF0dHJpYnV0ZSBmb3IgdmFyaWFibGVzLiAqL1xuXHRcdHN1cHBvcnRzVmFyaWFibGVUeXBlPzogYm9vbGVhbjtcblx0XHQvKiogQ2xpZW50IHN1cHBvcnRzIHRoZSBwYWdpbmcgb2YgdmFyaWFibGVzLiAqL1xuXHRcdHN1cHBvcnRzVmFyaWFibGVQYWdpbmc/OiBib29sZWFuO1xuXHRcdC8qKiBDbGllbnQgc3VwcG9ydHMgdGhlIHJ1bkluVGVybWluYWwgcmVxdWVzdC4gKi9cblx0XHRzdXBwb3J0c1J1bkluVGVybWluYWxSZXF1ZXN0PzogYm9vbGVhbjtcblx0fVxuXG5cdC8qKiBSZXNwb25zZSB0byAnaW5pdGlhbGl6ZScgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBJbml0aWFsaXplUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdFx0LyoqIFRoZSBjYXBhYmlsaXRpZXMgb2YgdGhpcyBkZWJ1ZyBhZGFwdGVyLiAqL1xuXHRcdGJvZHk/OiBDYXBhYmlsaXRpZXM7XG5cdH1cblxuXHQvKiogQ29uZmlndXJhdGlvbkRvbmUgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyAnY29uZmlndXJhdGlvbkRvbmUnLlxuXHRcdFRoZSBjbGllbnQgb2YgdGhlIGRlYnVnIHByb3RvY29sIG11c3Qgc2VuZCB0aGlzIHJlcXVlc3QgYXQgdGhlIGVuZCBvZiB0aGUgc2VxdWVuY2Ugb2YgY29uZmlndXJhdGlvbiByZXF1ZXN0cyAod2hpY2ggd2FzIHN0YXJ0ZWQgYnkgdGhlIEluaXRpYWxpemVkRXZlbnQpLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIENvbmZpZ3VyYXRpb25Eb25lUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdC8vIGNvbW1hbmQ6ICdjb25maWd1cmF0aW9uRG9uZSc7XG5cdFx0YXJndW1lbnRzPzogQ29uZmlndXJhdGlvbkRvbmVBcmd1bWVudHM7XG5cdH1cblxuXHQvKiogQXJndW1lbnRzIGZvciAnY29uZmlndXJhdGlvbkRvbmUnIHJlcXVlc3QuXG5cdFx0VGhlIGNvbmZpZ3VyYXRpb25Eb25lIHJlcXVlc3QgaGFzIG5vIHN0YW5kYXJkaXplZCBhdHRyaWJ1dGVzLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIENvbmZpZ3VyYXRpb25Eb25lQXJndW1lbnRzIHtcblx0fVxuXG5cdC8qKiBSZXNwb25zZSB0byAnY29uZmlndXJhdGlvbkRvbmUnIHJlcXVlc3QuIFRoaXMgaXMganVzdCBhbiBhY2tub3dsZWRnZW1lbnQsIHNvIG5vIGJvZHkgZmllbGQgaXMgcmVxdWlyZWQuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29uZmlndXJhdGlvbkRvbmVSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0fVxuXG5cdC8qKiBMYXVuY2ggcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyAnbGF1bmNoJy4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBMYXVuY2hSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0Ly8gY29tbWFuZDogJ2xhdW5jaCc7XG5cdFx0YXJndW1lbnRzOiBMYXVuY2hSZXF1ZXN0QXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ2xhdW5jaCcgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBMYXVuY2hSZXF1ZXN0QXJndW1lbnRzIHtcblx0XHQvKiogSWYgbm9EZWJ1ZyBpcyB0cnVlIHRoZSBsYXVuY2ggcmVxdWVzdCBzaG91bGQgbGF1bmNoIHRoZSBwcm9ncmFtIHdpdGhvdXQgZW5hYmxpbmcgZGVidWdnaW5nLiAqL1xuXHRcdG5vRGVidWc/OiBib29sZWFuO1xuXHR9XG5cblx0LyoqIFJlc3BvbnNlIHRvICdsYXVuY2gnIHJlcXVlc3QuIFRoaXMgaXMganVzdCBhbiBhY2tub3dsZWRnZW1lbnQsIHNvIG5vIGJvZHkgZmllbGQgaXMgcmVxdWlyZWQuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgTGF1bmNoUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdH1cblxuXHQvKiogQXR0YWNoIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgJ2F0dGFjaCcuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQXR0YWNoUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdC8vIGNvbW1hbmQ6ICdhdHRhY2gnO1xuXHRcdGFyZ3VtZW50czogQXR0YWNoUmVxdWVzdEFyZ3VtZW50cztcblx0fVxuXG5cdC8qKiBBcmd1bWVudHMgZm9yICdhdHRhY2gnIHJlcXVlc3QuXG5cdFx0VGhlIGF0dGFjaCByZXF1ZXN0IGhhcyBubyBzdGFuZGFyZGl6ZWQgYXR0cmlidXRlcy5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBBdHRhY2hSZXF1ZXN0QXJndW1lbnRzIHtcblx0fVxuXG5cdC8qKiBSZXNwb25zZSB0byAnYXR0YWNoJyByZXF1ZXN0LiBUaGlzIGlzIGp1c3QgYW4gYWNrbm93bGVkZ2VtZW50LCBzbyBubyBib2R5IGZpZWxkIGlzIHJlcXVpcmVkLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEF0dGFjaFJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHR9XG5cblx0LyoqIFJlc3RhcnQgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyAncmVzdGFydCcuXG5cdFx0UmVzdGFydHMgYSBkZWJ1ZyBzZXNzaW9uLiBJZiB0aGUgY2FwYWJpbGl0eSAnc3VwcG9ydHNSZXN0YXJ0UmVxdWVzdCcgaXMgbWlzc2luZyBvciBoYXMgdGhlIHZhbHVlIGZhbHNlLFxuXHRcdHRoZSBjbGllbnQgd2lsbCBpbXBsZW1lbnQgJ3Jlc3RhcnQnIGJ5IHRlcm1pbmF0aW5nIHRoZSBkZWJ1ZyBhZGFwdGVyIGZpcnN0IGFuZCB0aGVuIGxhdW5jaGluZyBpdCBhbmV3LlxuXHRcdEEgZGVidWcgYWRhcHRlciBjYW4gb3ZlcnJpZGUgdGhpcyBkZWZhdWx0IGJlaGF2aW91ciBieSBpbXBsZW1lbnRpbmcgYSByZXN0YXJ0IHJlcXVlc3Rcblx0XHRhbmQgc2V0dGluZyB0aGUgY2FwYWJpbGl0eSAnc3VwcG9ydHNSZXN0YXJ0UmVxdWVzdCcgdG8gdHJ1ZS5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBSZXN0YXJ0UmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdC8vIGNvbW1hbmQ6ICdyZXN0YXJ0Jztcblx0XHRhcmd1bWVudHM/OiBSZXN0YXJ0QXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ3Jlc3RhcnQnIHJlcXVlc3QuXG5cdFx0VGhlIHJlc3RhcnQgcmVxdWVzdCBoYXMgbm8gc3RhbmRhcmRpemVkIGF0dHJpYnV0ZXMuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgUmVzdGFydEFyZ3VtZW50cyB7XG5cdH1cblxuXHQvKiogUmVzcG9uc2UgdG8gJ3Jlc3RhcnQnIHJlcXVlc3QuIFRoaXMgaXMganVzdCBhbiBhY2tub3dsZWRnZW1lbnQsIHNvIG5vIGJvZHkgZmllbGQgaXMgcmVxdWlyZWQuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgUmVzdGFydFJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHR9XG5cblx0LyoqIERpc2Nvbm5lY3QgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyAnZGlzY29ubmVjdCcuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgRGlzY29ubmVjdFJlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHQvLyBjb21tYW5kOiAnZGlzY29ubmVjdCc7XG5cdFx0YXJndW1lbnRzPzogRGlzY29ubmVjdEFyZ3VtZW50cztcblx0fVxuXG5cdC8qKiBBcmd1bWVudHMgZm9yICdkaXNjb25uZWN0JyByZXF1ZXN0LlxuXHRcdFRoZSBkaXNjb25uZWN0IHJlcXVlc3QgaGFzIG5vIHN0YW5kYXJkaXplZCBhdHRyaWJ1dGVzLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIERpc2Nvbm5lY3RBcmd1bWVudHMge1xuXHR9XG5cblx0LyoqIFJlc3BvbnNlIHRvICdkaXNjb25uZWN0JyByZXF1ZXN0LiBUaGlzIGlzIGp1c3QgYW4gYWNrbm93bGVkZ2VtZW50LCBzbyBubyBib2R5IGZpZWxkIGlzIHJlcXVpcmVkLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIERpc2Nvbm5lY3RSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0fVxuXG5cdC8qKiBTZXRCcmVha3BvaW50cyByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzICdzZXRCcmVha3BvaW50cycuXG5cdFx0U2V0cyBtdWx0aXBsZSBicmVha3BvaW50cyBmb3IgYSBzaW5nbGUgc291cmNlIGFuZCBjbGVhcnMgYWxsIHByZXZpb3VzIGJyZWFrcG9pbnRzIGluIHRoYXQgc291cmNlLlxuXHRcdFRvIGNsZWFyIGFsbCBicmVha3BvaW50IGZvciBhIHNvdXJjZSwgc3BlY2lmeSBhbiBlbXB0eSBhcnJheS5cblx0XHRXaGVuIGEgYnJlYWtwb2ludCBpcyBoaXQsIGEgU3RvcHBlZEV2ZW50IChldmVudCB0eXBlICdicmVha3BvaW50JykgaXMgZ2VuZXJhdGVkLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFNldEJyZWFrcG9pbnRzUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdC8vIGNvbW1hbmQ6ICdzZXRCcmVha3BvaW50cyc7XG5cdFx0YXJndW1lbnRzOiBTZXRCcmVha3BvaW50c0FyZ3VtZW50cztcblx0fVxuXG5cdC8qKiBBcmd1bWVudHMgZm9yICdzZXRCcmVha3BvaW50cycgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTZXRCcmVha3BvaW50c0FyZ3VtZW50cyB7XG5cdFx0LyoqIFRoZSBzb3VyY2UgbG9jYXRpb24gb2YgdGhlIGJyZWFrcG9pbnRzOyBlaXRoZXIgc291cmNlLnBhdGggb3Igc291cmNlLnJlZmVyZW5jZSBtdXN0IGJlIHNwZWNpZmllZC4gKi9cblx0XHRzb3VyY2U6IFNvdXJjZTtcblx0XHQvKiogVGhlIGNvZGUgbG9jYXRpb25zIG9mIHRoZSBicmVha3BvaW50cy4gKi9cblx0XHRicmVha3BvaW50cz86IFNvdXJjZUJyZWFrcG9pbnRbXTtcblx0XHQvKiogRGVwcmVjYXRlZDogVGhlIGNvZGUgbG9jYXRpb25zIG9mIHRoZSBicmVha3BvaW50cy4gKi9cblx0XHRsaW5lcz86IG51bWJlcltdO1xuXHRcdC8qKiBBIHZhbHVlIG9mIHRydWUgaW5kaWNhdGVzIHRoYXQgdGhlIHVuZGVybHlpbmcgc291cmNlIGhhcyBiZWVuIG1vZGlmaWVkIHdoaWNoIHJlc3VsdHMgaW4gbmV3IGJyZWFrcG9pbnQgbG9jYXRpb25zLiAqL1xuXHRcdHNvdXJjZU1vZGlmaWVkPzogYm9vbGVhbjtcblx0fVxuXG5cdC8qKiBSZXNwb25zZSB0byAnc2V0QnJlYWtwb2ludHMnIHJlcXVlc3QuXG5cdFx0UmV0dXJuZWQgaXMgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBicmVha3BvaW50IGNyZWF0ZWQgYnkgdGhpcyByZXF1ZXN0LlxuXHRcdFRoaXMgaW5jbHVkZXMgdGhlIGFjdHVhbCBjb2RlIGxvY2F0aW9uIGFuZCB3aGV0aGVyIHRoZSBicmVha3BvaW50IGNvdWxkIGJlIHZlcmlmaWVkLlxuXHRcdFRoZSBicmVha3BvaW50cyByZXR1cm5lZCBhcmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGVsZW1lbnRzIG9mIHRoZSAnYnJlYWtwb2ludHMnXG5cdFx0KG9yIHRoZSBkZXByZWNhdGVkICdsaW5lcycpIGluIHRoZSBTZXRCcmVha3BvaW50c0FyZ3VtZW50cy5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBTZXRCcmVha3BvaW50c1Jlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgYnJlYWtwb2ludHMuIFRoZSBhcnJheSBlbGVtZW50cyBhcmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGVsZW1lbnRzIG9mIHRoZSAnYnJlYWtwb2ludHMnIChvciB0aGUgZGVwcmVjYXRlZCAnbGluZXMnKSBpbiB0aGUgU2V0QnJlYWtwb2ludHNBcmd1bWVudHMuICovXG5cdFx0XHRicmVha3BvaW50czogQnJlYWtwb2ludFtdO1xuXHRcdH07XG5cdH1cblxuXHQvKiogU2V0RnVuY3Rpb25CcmVha3BvaW50cyByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzICdzZXRGdW5jdGlvbkJyZWFrcG9pbnRzJy5cblx0XHRTZXRzIG11bHRpcGxlIGZ1bmN0aW9uIGJyZWFrcG9pbnRzIGFuZCBjbGVhcnMgYWxsIHByZXZpb3VzIGZ1bmN0aW9uIGJyZWFrcG9pbnRzLlxuXHRcdFRvIGNsZWFyIGFsbCBmdW5jdGlvbiBicmVha3BvaW50LCBzcGVjaWZ5IGFuIGVtcHR5IGFycmF5LlxuXHRcdFdoZW4gYSBmdW5jdGlvbiBicmVha3BvaW50IGlzIGhpdCwgYSBTdG9wcGVkRXZlbnQgKGV2ZW50IHR5cGUgJ2Z1bmN0aW9uIGJyZWFrcG9pbnQnKSBpcyBnZW5lcmF0ZWQuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2V0RnVuY3Rpb25CcmVha3BvaW50c1JlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHQvLyBjb21tYW5kOiAnc2V0RnVuY3Rpb25CcmVha3BvaW50cyc7XG5cdFx0YXJndW1lbnRzOiBTZXRGdW5jdGlvbkJyZWFrcG9pbnRzQXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ3NldEZ1bmN0aW9uQnJlYWtwb2ludHMnIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2V0RnVuY3Rpb25CcmVha3BvaW50c0FyZ3VtZW50cyB7XG5cdFx0LyoqIFRoZSBmdW5jdGlvbiBuYW1lcyBvZiB0aGUgYnJlYWtwb2ludHMuICovXG5cdFx0YnJlYWtwb2ludHM6IEZ1bmN0aW9uQnJlYWtwb2ludFtdO1xuXHR9XG5cblx0LyoqIFJlc3BvbnNlIHRvICdzZXRGdW5jdGlvbkJyZWFrcG9pbnRzJyByZXF1ZXN0LlxuXHRcdFJldHVybmVkIGlzIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggYnJlYWtwb2ludCBjcmVhdGVkIGJ5IHRoaXMgcmVxdWVzdC5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBTZXRGdW5jdGlvbkJyZWFrcG9pbnRzUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIEluZm9ybWF0aW9uIGFib3V0IHRoZSBicmVha3BvaW50cy4gVGhlIGFycmF5IGVsZW1lbnRzIGNvcnJlc3BvbmQgdG8gdGhlIGVsZW1lbnRzIG9mIHRoZSAnYnJlYWtwb2ludHMnIGFycmF5LiAqL1xuXHRcdFx0YnJlYWtwb2ludHM6IEJyZWFrcG9pbnRbXTtcblx0XHR9O1xuXHR9XG5cblx0LyoqIFNldEV4Y2VwdGlvbkJyZWFrcG9pbnRzIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgJ3NldEV4Y2VwdGlvbkJyZWFrcG9pbnRzJy5cblx0XHRUaGUgcmVxdWVzdCBjb25maWd1cmVzIHRoZSBkZWJ1Z2dlcnMgcmVzcG9uc2UgdG8gdGhyb3duIGV4Y2VwdGlvbnMuIElmIGFuIGV4ZWNwdGlvbiBpcyBjb25maWd1cmVkIHRvIGJyZWFrLCBhIFN0b3BwZWRFdmVudCBpcyBmaXJlZCAoZXZlbnQgdHlwZSAnZXhjZXB0aW9uJykuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2V0RXhjZXB0aW9uQnJlYWtwb2ludHNSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0Ly8gY29tbWFuZDogJ3NldEV4Y2VwdGlvbkJyZWFrcG9pbnRzJztcblx0XHRhcmd1bWVudHM6IFNldEV4Y2VwdGlvbkJyZWFrcG9pbnRzQXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ3NldEV4Y2VwdGlvbkJyZWFrcG9pbnRzJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFNldEV4Y2VwdGlvbkJyZWFrcG9pbnRzQXJndW1lbnRzIHtcblx0XHQvKiogSURzIG9mIGNoZWNrZWQgZXhjZXB0aW9uIG9wdGlvbnMuIFRoZSBzZXQgb2YgSURzIGlzIHJldHVybmVkIHZpYSB0aGUgJ2V4Y2VwdGlvbkJyZWFrcG9pbnRGaWx0ZXJzJyBjYXBhYmlsaXR5LiAqL1xuXHRcdGZpbHRlcnM6IHN0cmluZ1tdO1xuXHRcdC8qKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHNlbGVjdGVkIGV4Y2VwdGlvbnMuICovXG5cdFx0ZXhjZXB0aW9uT3B0aW9ucz86IEV4Y2VwdGlvbk9wdGlvbnNbXTtcblx0fVxuXG5cdC8qKiBSZXNwb25zZSB0byAnc2V0RXhjZXB0aW9uQnJlYWtwb2ludHMnIHJlcXVlc3QuIFRoaXMgaXMganVzdCBhbiBhY2tub3dsZWRnZW1lbnQsIHNvIG5vIGJvZHkgZmllbGQgaXMgcmVxdWlyZWQuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2V0RXhjZXB0aW9uQnJlYWtwb2ludHNSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0fVxuXG5cdC8qKiBDb250aW51ZSByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzICdjb250aW51ZScuXG5cdFx0VGhlIHJlcXVlc3Qgc3RhcnRzIHRoZSBkZWJ1Z2dlZSB0byBydW4gYWdhaW4uXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ29udGludWVSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0Ly8gY29tbWFuZDogJ2NvbnRpbnVlJztcblx0XHRhcmd1bWVudHM6IENvbnRpbnVlQXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ2NvbnRpbnVlJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIENvbnRpbnVlQXJndW1lbnRzIHtcblx0XHQvKiogQ29udGludWUgZXhlY3V0aW9uIGZvciB0aGUgc3BlY2lmaWVkIHRocmVhZCAoaWYgcG9zc2libGUpLiBJZiB0aGUgYmFja2VuZCBjYW5ub3QgY29udGludWUgb24gYSBzaW5nbGUgdGhyZWFkIGJ1dCB3aWxsIGNvbnRpbnVlIG9uIGFsbCB0aHJlYWRzLCBpdCBzaG91bGQgc2V0IHRoZSBhbGxUaHJlYWRzQ29udGludWVkIGF0dHJpYnV0ZSBpbiB0aGUgcmVzcG9uc2UgdG8gdHJ1ZS4gKi9cblx0XHR0aHJlYWRJZDogbnVtYmVyO1xuXHR9XG5cblx0LyoqIFJlc3BvbnNlIHRvICdjb250aW51ZScgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBDb250aW51ZVJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBJZiB0cnVlLCB0aGUgY29udGludWUgcmVxdWVzdCBoYXMgaWdub3JlZCB0aGUgc3BlY2lmaWVkIHRocmVhZCBhbmQgY29udGludWVkIGFsbCB0aHJlYWRzIGluc3RlYWQuIElmIHRoaXMgYXR0cmlidXRlIGlzIG1pc3NpbmcgYSB2YWx1ZSBvZiAndHJ1ZScgaXMgYXNzdW1lZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gKi9cblx0XHRcdGFsbFRocmVhZHNDb250aW51ZWQ/OiBib29sZWFuO1xuXHRcdH07XG5cdH1cblxuXHQvKiogTmV4dCByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzICduZXh0Jy5cblx0XHRUaGUgcmVxdWVzdCBzdGFydHMgdGhlIGRlYnVnZ2VlIHRvIHJ1biBhZ2FpbiBmb3Igb25lIHN0ZXAuXG5cdFx0VGhlIGRlYnVnIGFkYXB0ZXIgZmlyc3Qgc2VuZHMgdGhlIE5leHRSZXNwb25zZSBhbmQgdGhlbiBhIFN0b3BwZWRFdmVudCAoZXZlbnQgdHlwZSAnc3RlcCcpIGFmdGVyIHRoZSBzdGVwIGhhcyBjb21wbGV0ZWQuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgTmV4dFJlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHQvLyBjb21tYW5kOiAnbmV4dCc7XG5cdFx0YXJndW1lbnRzOiBOZXh0QXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ25leHQnIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgTmV4dEFyZ3VtZW50cyB7XG5cdFx0LyoqIEV4ZWN1dGUgJ25leHQnIGZvciB0aGlzIHRocmVhZC4gKi9cblx0XHR0aHJlYWRJZDogbnVtYmVyO1xuXHR9XG5cblx0LyoqIFJlc3BvbnNlIHRvICduZXh0JyByZXF1ZXN0LiBUaGlzIGlzIGp1c3QgYW4gYWNrbm93bGVkZ2VtZW50LCBzbyBubyBib2R5IGZpZWxkIGlzIHJlcXVpcmVkLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIE5leHRSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0fVxuXG5cdC8qKiBTdGVwSW4gcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyAnc3RlcEluJy5cblx0XHRUaGUgcmVxdWVzdCBzdGFydHMgdGhlIGRlYnVnZ2VlIHRvIHN0ZXAgaW50byBhIGZ1bmN0aW9uL21ldGhvZCBpZiBwb3NzaWJsZS5cblx0XHRJZiBpdCBjYW5ub3Qgc3RlcCBpbnRvIGEgdGFyZ2V0LCAnc3RlcEluJyBiZWhhdmVzIGxpa2UgJ25leHQnLlxuXHRcdFRoZSBkZWJ1ZyBhZGFwdGVyIGZpcnN0IHNlbmRzIHRoZSBTdGVwSW5SZXNwb25zZSBhbmQgdGhlbiBhIFN0b3BwZWRFdmVudCAoZXZlbnQgdHlwZSAnc3RlcCcpIGFmdGVyIHRoZSBzdGVwIGhhcyBjb21wbGV0ZWQuXG5cdFx0SWYgdGhlcmUgYXJlIG11bHRpcGxlIGZ1bmN0aW9uL21ldGhvZCBjYWxscyAob3Igb3RoZXIgdGFyZ2V0cykgb24gdGhlIHNvdXJjZSBsaW5lLFxuXHRcdHRoZSBvcHRpb25hbCBhcmd1bWVudCAndGFyZ2V0SWQnIGNhbiBiZSB1c2VkIHRvIGNvbnRyb2wgaW50byB3aGljaCB0YXJnZXQgdGhlICdzdGVwSW4nIHNob3VsZCBvY2N1ci5cblx0XHRUaGUgbGlzdCBvZiBwb3NzaWJsZSB0YXJnZXRzIGZvciBhIGdpdmVuIHNvdXJjZSBsaW5lIGNhbiBiZSByZXRyaWV2ZWQgdmlhIHRoZSAnc3RlcEluVGFyZ2V0cycgcmVxdWVzdC5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBTdGVwSW5SZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0Ly8gY29tbWFuZDogJ3N0ZXBJbic7XG5cdFx0YXJndW1lbnRzOiBTdGVwSW5Bcmd1bWVudHM7XG5cdH1cblxuXHQvKiogQXJndW1lbnRzIGZvciAnc3RlcEluJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0ZXBJbkFyZ3VtZW50cyB7XG5cdFx0LyoqIEV4ZWN1dGUgJ3N0ZXBJbicgZm9yIHRoaXMgdGhyZWFkLiAqL1xuXHRcdHRocmVhZElkOiBudW1iZXI7XG5cdFx0LyoqIE9wdGlvbmFsIGlkIG9mIHRoZSB0YXJnZXQgdG8gc3RlcCBpbnRvLiAqL1xuXHRcdHRhcmdldElkPzogbnVtYmVyO1xuXHR9XG5cblx0LyoqIFJlc3BvbnNlIHRvICdzdGVwSW4nIHJlcXVlc3QuIFRoaXMgaXMganVzdCBhbiBhY2tub3dsZWRnZW1lbnQsIHNvIG5vIGJvZHkgZmllbGQgaXMgcmVxdWlyZWQuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RlcEluUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdH1cblxuXHQvKiogU3RlcE91dCByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzICdzdGVwT3V0Jy5cblx0XHRUaGUgcmVxdWVzdCBzdGFydHMgdGhlIGRlYnVnZ2VlIHRvIHJ1biBhZ2FpbiBmb3Igb25lIHN0ZXAuXG5cdFx0VGhlIGRlYnVnIGFkYXB0ZXIgZmlyc3Qgc2VuZHMgdGhlIFN0ZXBPdXRSZXNwb25zZSBhbmQgdGhlbiBhIFN0b3BwZWRFdmVudCAoZXZlbnQgdHlwZSAnc3RlcCcpIGFmdGVyIHRoZSBzdGVwIGhhcyBjb21wbGV0ZWQuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RlcE91dFJlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHQvLyBjb21tYW5kOiAnc3RlcE91dCc7XG5cdFx0YXJndW1lbnRzOiBTdGVwT3V0QXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ3N0ZXBPdXQnIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RlcE91dEFyZ3VtZW50cyB7XG5cdFx0LyoqIEV4ZWN1dGUgJ3N0ZXBPdXQnIGZvciB0aGlzIHRocmVhZC4gKi9cblx0XHR0aHJlYWRJZDogbnVtYmVyO1xuXHR9XG5cblx0LyoqIFJlc3BvbnNlIHRvICdzdGVwT3V0JyByZXF1ZXN0LiBUaGlzIGlzIGp1c3QgYW4gYWNrbm93bGVkZ2VtZW50LCBzbyBubyBib2R5IGZpZWxkIGlzIHJlcXVpcmVkLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0ZXBPdXRSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0fVxuXG5cdC8qKiBTdGVwQmFjayByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzICdzdGVwQmFjaycuXG5cdFx0VGhlIHJlcXVlc3Qgc3RhcnRzIHRoZSBkZWJ1Z2dlZSB0byBydW4gb25lIHN0ZXAgYmFja3dhcmRzLlxuXHRcdFRoZSBkZWJ1ZyBhZGFwdGVyIGZpcnN0IHNlbmRzIHRoZSBTdGVwQmFja1Jlc3BvbnNlIGFuZCB0aGVuIGEgU3RvcHBlZEV2ZW50IChldmVudCB0eXBlICdzdGVwJykgYWZ0ZXIgdGhlIHN0ZXAgaGFzIGNvbXBsZXRlZC4gQ2xpZW50cyBzaG91bGQgb25seSBjYWxsIHRoaXMgcmVxdWVzdCBpZiB0aGUgY2FwYWJpbGl0eSBzdXBwb3J0c1N0ZXBCYWNrIGlzIHRydWUuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RlcEJhY2tSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0Ly8gY29tbWFuZDogJ3N0ZXBCYWNrJztcblx0XHRhcmd1bWVudHM6IFN0ZXBCYWNrQXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ3N0ZXBCYWNrJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0ZXBCYWNrQXJndW1lbnRzIHtcblx0XHQvKiogRXhjZXV0ZSAnc3RlcEJhY2snIGZvciB0aGlzIHRocmVhZC4gKi9cblx0XHR0aHJlYWRJZDogbnVtYmVyO1xuXHR9XG5cblx0LyoqIFJlc3BvbnNlIHRvICdzdGVwQmFjaycgcmVxdWVzdC4gVGhpcyBpcyBqdXN0IGFuIGFja25vd2xlZGdlbWVudCwgc28gbm8gYm9keSBmaWVsZCBpcyByZXF1aXJlZC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTdGVwQmFja1Jlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHR9XG5cblx0LyoqIFJldmVyc2VDb250aW51ZSByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzICdyZXZlcnNlQ29udGludWUnLlxuXHRcdFRoZSByZXF1ZXN0IHN0YXJ0cyB0aGUgZGVidWdnZWUgdG8gcnVuIGJhY2t3YXJkLiBDbGllbnRzIHNob3VsZCBvbmx5IGNhbGwgdGhpcyByZXF1ZXN0IGlmIHRoZSBjYXBhYmlsaXR5IHN1cHBvcnRzU3RlcEJhY2sgaXMgdHJ1ZS5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBSZXZlcnNlQ29udGludWVSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0Ly8gY29tbWFuZDogJ3JldmVyc2VDb250aW51ZSc7XG5cdFx0YXJndW1lbnRzOiBSZXZlcnNlQ29udGludWVBcmd1bWVudHM7XG5cdH1cblxuXHQvKiogQXJndW1lbnRzIGZvciAncmV2ZXJzZUNvbnRpbnVlJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFJldmVyc2VDb250aW51ZUFyZ3VtZW50cyB7XG5cdFx0LyoqIEV4Y2V1dGUgJ3JldmVyc2VDb250aW51ZScgZm9yIHRoaXMgdGhyZWFkLiAqL1xuXHRcdHRocmVhZElkOiBudW1iZXI7XG5cdH1cblxuXHQvKiogUmVzcG9uc2UgdG8gJ3JldmVyc2VDb250aW51ZScgcmVxdWVzdC4gVGhpcyBpcyBqdXN0IGFuIGFja25vd2xlZGdlbWVudCwgc28gbm8gYm9keSBmaWVsZCBpcyByZXF1aXJlZC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBSZXZlcnNlQ29udGludWVSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0fVxuXG5cdC8qKiBSZXN0YXJ0RnJhbWUgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyAncmVzdGFydEZyYW1lJy5cblx0XHRUaGUgcmVxdWVzdCByZXN0YXJ0cyBleGVjdXRpb24gb2YgdGhlIHNwZWNpZmllZCBzdGFja2ZyYW1lLlxuXHRcdFRoZSBkZWJ1ZyBhZGFwdGVyIGZpcnN0IHNlbmRzIHRoZSBSZXN0YXJ0RnJhbWVSZXNwb25zZSBhbmQgdGhlbiBhIFN0b3BwZWRFdmVudCAoZXZlbnQgdHlwZSAncmVzdGFydCcpIGFmdGVyIHRoZSByZXN0YXJ0IGhhcyBjb21wbGV0ZWQuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgUmVzdGFydEZyYW1lUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdC8vIGNvbW1hbmQ6ICdyZXN0YXJ0RnJhbWUnO1xuXHRcdGFyZ3VtZW50czogUmVzdGFydEZyYW1lQXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ3Jlc3RhcnRGcmFtZScgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBSZXN0YXJ0RnJhbWVBcmd1bWVudHMge1xuXHRcdC8qKiBSZXN0YXJ0IHRoaXMgc3RhY2tmcmFtZS4gKi9cblx0XHRmcmFtZUlkOiBudW1iZXI7XG5cdH1cblxuXHQvKiogUmVzcG9uc2UgdG8gJ3Jlc3RhcnRGcmFtZScgcmVxdWVzdC4gVGhpcyBpcyBqdXN0IGFuIGFja25vd2xlZGdlbWVudCwgc28gbm8gYm9keSBmaWVsZCBpcyByZXF1aXJlZC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBSZXN0YXJ0RnJhbWVSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0fVxuXG5cdC8qKiBHb3RvIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgJ2dvdG8nLlxuXHRcdFRoZSByZXF1ZXN0IHNldHMgdGhlIGxvY2F0aW9uIHdoZXJlIHRoZSBkZWJ1Z2dlZSB3aWxsIGNvbnRpbnVlIHRvIHJ1bi5cblx0XHRUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIHNraXAgdGhlIGV4ZWN1dGlvbiBvZiBjb2RlIG9yIHRvIGV4ZWN1dGVkIGNvZGUgYWdhaW4uXG5cdFx0VGhlIGNvZGUgYmV0d2VlbiB0aGUgY3VycmVudCBsb2NhdGlvbiBhbmQgdGhlIGdvdG8gdGFyZ2V0IGlzIG5vdCBleGVjdXRlZCBidXQgc2tpcHBlZC5cblx0XHRUaGUgZGVidWcgYWRhcHRlciBmaXJzdCBzZW5kcyB0aGUgR290b1Jlc3BvbnNlIGFuZCB0aGVuIGEgU3RvcHBlZEV2ZW50IChldmVudCB0eXBlICdnb3RvJykuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgR290b1JlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHQvLyBjb21tYW5kOiAnZ290byc7XG5cdFx0YXJndW1lbnRzOiBHb3RvQXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ2dvdG8nIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgR290b0FyZ3VtZW50cyB7XG5cdFx0LyoqIFNldCB0aGUgZ290byB0YXJnZXQgZm9yIHRoaXMgdGhyZWFkLiAqL1xuXHRcdHRocmVhZElkOiBudW1iZXI7XG5cdFx0LyoqIFRoZSBsb2NhdGlvbiB3aGVyZSB0aGUgZGVidWdnZWUgd2lsbCBjb250aW51ZSB0byBydW4uICovXG5cdFx0dGFyZ2V0SWQ6IG51bWJlcjtcblx0fVxuXG5cdC8qKiBSZXNwb25zZSB0byAnZ290bycgcmVxdWVzdC4gVGhpcyBpcyBqdXN0IGFuIGFja25vd2xlZGdlbWVudCwgc28gbm8gYm9keSBmaWVsZCBpcyByZXF1aXJlZC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBHb3RvUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdH1cblxuXHQvKiogUGF1c2UgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyAncGF1c2UnLlxuXHRcdFRoZSByZXF1ZXN0IHN1c3BlbnNlcyB0aGUgZGVidWdnZWUuXG5cdFx0VGhlIGRlYnVnIGFkYXB0ZXIgZmlyc3Qgc2VuZHMgdGhlIFBhdXNlUmVzcG9uc2UgYW5kIHRoZW4gYSBTdG9wcGVkRXZlbnQgKGV2ZW50IHR5cGUgJ3BhdXNlJykgYWZ0ZXIgdGhlIHRocmVhZCBoYXMgYmVlbiBwYXVzZWQgc3VjY2Vzc2Z1bGx5LlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFBhdXNlUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdC8vIGNvbW1hbmQ6ICdwYXVzZSc7XG5cdFx0YXJndW1lbnRzOiBQYXVzZUFyZ3VtZW50cztcblx0fVxuXG5cdC8qKiBBcmd1bWVudHMgZm9yICdwYXVzZScgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBQYXVzZUFyZ3VtZW50cyB7XG5cdFx0LyoqIFBhdXNlIGV4ZWN1dGlvbiBmb3IgdGhpcyB0aHJlYWQuICovXG5cdFx0dGhyZWFkSWQ6IG51bWJlcjtcblx0fVxuXG5cdC8qKiBSZXNwb25zZSB0byAncGF1c2UnIHJlcXVlc3QuIFRoaXMgaXMganVzdCBhbiBhY2tub3dsZWRnZW1lbnQsIHNvIG5vIGJvZHkgZmllbGQgaXMgcmVxdWlyZWQuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgUGF1c2VSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0fVxuXG5cdC8qKiBTdGFja1RyYWNlIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgJ3N0YWNrVHJhY2UnLiBUaGUgcmVxdWVzdCByZXR1cm5zIGEgc3RhY2t0cmFjZSBmcm9tIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBzdGF0ZS4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTdGFja1RyYWNlUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdC8vIGNvbW1hbmQ6ICdzdGFja1RyYWNlJztcblx0XHRhcmd1bWVudHM6IFN0YWNrVHJhY2VBcmd1bWVudHM7XG5cdH1cblxuXHQvKiogQXJndW1lbnRzIGZvciAnc3RhY2tUcmFjZScgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTdGFja1RyYWNlQXJndW1lbnRzIHtcblx0XHQvKiogUmV0cmlldmUgdGhlIHN0YWNrdHJhY2UgZm9yIHRoaXMgdGhyZWFkLiAqL1xuXHRcdHRocmVhZElkOiBudW1iZXI7XG5cdFx0LyoqIFRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZnJhbWUgdG8gcmV0dXJuOyBpZiBvbWl0dGVkIGZyYW1lcyBzdGFydCBhdCAwLiAqL1xuXHRcdHN0YXJ0RnJhbWU/OiBudW1iZXI7XG5cdFx0LyoqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBmcmFtZXMgdG8gcmV0dXJuLiBJZiBsZXZlbHMgaXMgbm90IHNwZWNpZmllZCBvciAwLCBhbGwgZnJhbWVzIGFyZSByZXR1cm5lZC4gKi9cblx0XHRsZXZlbHM/OiBudW1iZXI7XG5cdFx0LyoqIFNwZWNpZmllcyBkZXRhaWxzIG9uIGhvdyB0byBmb3JtYXQgdGhlIHN0YWNrIGZyYW1lcy4gKi9cblx0XHRmb3JtYXQ/OiBTdGFja0ZyYW1lRm9ybWF0O1xuXHR9XG5cblx0LyoqIFJlc3BvbnNlIHRvICdzdGFja1RyYWNlJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0YWNrVHJhY2VSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogVGhlIGZyYW1lcyBvZiB0aGUgc3RhY2tmcmFtZS4gSWYgdGhlIGFycmF5IGhhcyBsZW5ndGggemVybywgdGhlcmUgYXJlIG5vIHN0YWNrZnJhbWVzIGF2YWlsYWJsZS5cblx0XHRcdFx0VGhpcyBtZWFucyB0aGF0IHRoZXJlIGlzIG5vIGxvY2F0aW9uIGluZm9ybWF0aW9uIGF2YWlsYWJsZS5cblx0XHRcdCovXG5cdFx0XHRzdGFja0ZyYW1lczogU3RhY2tGcmFtZVtdO1xuXHRcdFx0LyoqIFRoZSB0b3RhbCBudW1iZXIgb2YgZnJhbWVzIGF2YWlsYWJsZS4gKi9cblx0XHRcdHRvdGFsRnJhbWVzPzogbnVtYmVyO1xuXHRcdH07XG5cdH1cblxuXHQvKiogU2NvcGVzIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgJ3Njb3BlcycuXG5cdFx0VGhlIHJlcXVlc3QgcmV0dXJucyB0aGUgdmFyaWFibGUgc2NvcGVzIGZvciBhIGdpdmVuIHN0YWNrZnJhbWUgSUQuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2NvcGVzUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdC8vIGNvbW1hbmQ6ICdzY29wZXMnO1xuXHRcdGFyZ3VtZW50czogU2NvcGVzQXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ3Njb3BlcycgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTY29wZXNBcmd1bWVudHMge1xuXHRcdC8qKiBSZXRyaWV2ZSB0aGUgc2NvcGVzIGZvciB0aGlzIHN0YWNrZnJhbWUuICovXG5cdFx0ZnJhbWVJZDogbnVtYmVyO1xuXHR9XG5cblx0LyoqIFJlc3BvbnNlIHRvICdzY29wZXMnIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2NvcGVzUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIFRoZSBzY29wZXMgb2YgdGhlIHN0YWNrZnJhbWUuIElmIHRoZSBhcnJheSBoYXMgbGVuZ3RoIHplcm8sIHRoZXJlIGFyZSBubyBzY29wZXMgYXZhaWxhYmxlLiAqL1xuXHRcdFx0c2NvcGVzOiBTY29wZVtdO1xuXHRcdH07XG5cdH1cblxuXHQvKiogVmFyaWFibGVzIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgJ3ZhcmlhYmxlcycuXG5cdFx0UmV0cmlldmVzIGFsbCBjaGlsZCB2YXJpYWJsZXMgZm9yIHRoZSBnaXZlbiB2YXJpYWJsZSByZWZlcmVuY2UuXG5cdFx0QW4gb3B0aW9uYWwgZmlsdGVyIGNhbiBiZSB1c2VkIHRvIGxpbWl0IHRoZSBmZXRjaGVkIGNoaWxkcmVuIHRvIGVpdGhlciBuYW1lZCBvciBpbmRleGVkIGNoaWxkcmVuLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFZhcmlhYmxlc1JlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHQvLyBjb21tYW5kOiAndmFyaWFibGVzJztcblx0XHRhcmd1bWVudHM6IFZhcmlhYmxlc0FyZ3VtZW50cztcblx0fVxuXG5cdC8qKiBBcmd1bWVudHMgZm9yICd2YXJpYWJsZXMnIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgVmFyaWFibGVzQXJndW1lbnRzIHtcblx0XHQvKiogVGhlIFZhcmlhYmxlIHJlZmVyZW5jZS4gKi9cblx0XHR2YXJpYWJsZXNSZWZlcmVuY2U6IG51bWJlcjtcblx0XHQvKiogT3B0aW9uYWwgZmlsdGVyIHRvIGxpbWl0IHRoZSBjaGlsZCB2YXJpYWJsZXMgdG8gZWl0aGVyIG5hbWVkIG9yIGluZGV4ZWQuIElmIG9tbWl0ZWQsIGJvdGggdHlwZXMgYXJlIGZldGNoZWQuICovXG5cdFx0ZmlsdGVyPzogJ2luZGV4ZWQnIHwgJ25hbWVkJztcblx0XHQvKiogVGhlIGluZGV4IG9mIHRoZSBmaXJzdCB2YXJpYWJsZSB0byByZXR1cm47IGlmIG9taXR0ZWQgY2hpbGRyZW4gc3RhcnQgYXQgMC4gKi9cblx0XHRzdGFydD86IG51bWJlcjtcblx0XHQvKiogVGhlIG51bWJlciBvZiB2YXJpYWJsZXMgdG8gcmV0dXJuLiBJZiBjb3VudCBpcyBtaXNzaW5nIG9yIDAsIGFsbCB2YXJpYWJsZXMgYXJlIHJldHVybmVkLiAqL1xuXHRcdGNvdW50PzogbnVtYmVyO1xuXHRcdC8qKiBTcGVjaWZpZXMgZGV0YWlscyBvbiBob3cgdG8gZm9ybWF0IHRoZSBWYXJpYWJsZSB2YWx1ZXMuICovXG5cdFx0Zm9ybWF0PzogVmFsdWVGb3JtYXQ7XG5cdH1cblxuXHQvKiogUmVzcG9uc2UgdG8gJ3ZhcmlhYmxlcycgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBWYXJpYWJsZXNSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogQWxsIChvciBhIHJhbmdlKSBvZiB2YXJpYWJsZXMgZm9yIHRoZSBnaXZlbiB2YXJpYWJsZSByZWZlcmVuY2UuICovXG5cdFx0XHR2YXJpYWJsZXM6IFZhcmlhYmxlW107XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBzZXRWYXJpYWJsZSByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzICdzZXRWYXJpYWJsZScuXG5cdFx0U2V0IHRoZSB2YXJpYWJsZSB3aXRoIHRoZSBnaXZlbiBuYW1lIGluIHRoZSB2YXJpYWJsZSBjb250YWluZXIgdG8gYSBuZXcgdmFsdWUuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2V0VmFyaWFibGVSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0Ly8gY29tbWFuZDogJ3NldFZhcmlhYmxlJztcblx0XHRhcmd1bWVudHM6IFNldFZhcmlhYmxlQXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ3NldFZhcmlhYmxlJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFNldFZhcmlhYmxlQXJndW1lbnRzIHtcblx0XHQvKiogVGhlIHJlZmVyZW5jZSBvZiB0aGUgdmFyaWFibGUgY29udGFpbmVyLiAqL1xuXHRcdHZhcmlhYmxlc1JlZmVyZW5jZTogbnVtYmVyO1xuXHRcdC8qKiBUaGUgbmFtZSBvZiB0aGUgdmFyaWFibGUuICovXG5cdFx0bmFtZTogc3RyaW5nO1xuXHRcdC8qKiBUaGUgdmFsdWUgb2YgdGhlIHZhcmlhYmxlLiAqL1xuXHRcdHZhbHVlOiBzdHJpbmc7XG5cdFx0LyoqIFNwZWNpZmllcyBkZXRhaWxzIG9uIGhvdyB0byBmb3JtYXQgdGhlIHJlc3BvbnNlIHZhbHVlLiAqL1xuXHRcdGZvcm1hdD86IFZhbHVlRm9ybWF0O1xuXHR9XG5cblx0LyoqIFJlc3BvbnNlIHRvICdzZXRWYXJpYWJsZScgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTZXRWYXJpYWJsZVJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBUaGUgbmV3IHZhbHVlIG9mIHRoZSB2YXJpYWJsZS4gKi9cblx0XHRcdHZhbHVlOiBzdHJpbmc7XG5cdFx0XHQvKiogVGhlIHR5cGUgb2YgdGhlIG5ldyB2YWx1ZS4gVHlwaWNhbGx5IHNob3duIGluIHRoZSBVSSB3aGVuIGhvdmVyaW5nIG92ZXIgdGhlIHZhbHVlLiAqL1xuXHRcdFx0dHlwZT86IHN0cmluZztcblx0XHRcdC8qKiBJZiB2YXJpYWJsZXNSZWZlcmVuY2UgaXMgPiAwLCB0aGUgbmV3IHZhbHVlIGlzIHN0cnVjdHVyZWQgYW5kIGl0cyBjaGlsZHJlbiBjYW4gYmUgcmV0cmlldmVkIGJ5IHBhc3NpbmcgdmFyaWFibGVzUmVmZXJlbmNlIHRvIHRoZSBWYXJpYWJsZXNSZXF1ZXN0LiAqL1xuXHRcdFx0dmFyaWFibGVzUmVmZXJlbmNlPzogbnVtYmVyO1xuXHRcdFx0LyoqIFRoZSBudW1iZXIgb2YgbmFtZWQgY2hpbGQgdmFyaWFibGVzLlxuXHRcdFx0XHRUaGUgY2xpZW50IGNhbiB1c2UgdGhpcyBvcHRpb25hbCBpbmZvcm1hdGlvbiB0byBwcmVzZW50IHRoZSB2YXJpYWJsZXMgaW4gYSBwYWdlZCBVSSBhbmQgZmV0Y2ggdGhlbSBpbiBjaHVua3MuXG5cdFx0XHQqL1xuXHRcdFx0bmFtZWRWYXJpYWJsZXM/OiBudW1iZXI7XG5cdFx0XHQvKiogVGhlIG51bWJlciBvZiBpbmRleGVkIGNoaWxkIHZhcmlhYmxlcy5cblx0XHRcdFx0VGhlIGNsaWVudCBjYW4gdXNlIHRoaXMgb3B0aW9uYWwgaW5mb3JtYXRpb24gdG8gcHJlc2VudCB0aGUgdmFyaWFibGVzIGluIGEgcGFnZWQgVUkgYW5kIGZldGNoIHRoZW0gaW4gY2h1bmtzLlxuXHRcdFx0Ki9cblx0XHRcdGluZGV4ZWRWYXJpYWJsZXM/OiBudW1iZXI7XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBTb3VyY2UgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyAnc291cmNlJy5cblx0XHRUaGUgcmVxdWVzdCByZXRyaWV2ZXMgdGhlIHNvdXJjZSBjb2RlIGZvciBhIGdpdmVuIHNvdXJjZSByZWZlcmVuY2UuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU291cmNlUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdC8vIGNvbW1hbmQ6ICdzb3VyY2UnO1xuXHRcdGFyZ3VtZW50czogU291cmNlQXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ3NvdXJjZScgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTb3VyY2VBcmd1bWVudHMge1xuXHRcdC8qKiBUaGUgcmVmZXJlbmNlIHRvIHRoZSBzb3VyY2UuIFRoaXMgaXMgdGhlIHZhbHVlIHJlY2VpdmVkIGluIFNvdXJjZS5yZWZlcmVuY2UuICovXG5cdFx0c291cmNlUmVmZXJlbmNlOiBudW1iZXI7XG5cdH1cblxuXHQvKiogUmVzcG9uc2UgdG8gJ3NvdXJjZScgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTb3VyY2VSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogQ29udGVudCBvZiB0aGUgc291cmNlIHJlZmVyZW5jZS4gKi9cblx0XHRcdGNvbnRlbnQ6IHN0cmluZztcblx0XHRcdC8qKiBPcHRpb25hbCBjb250ZW50IHR5cGUgKG1pbWUgdHlwZSkgb2YgdGhlIHNvdXJjZS4gKi9cblx0XHRcdG1pbWVUeXBlPzogc3RyaW5nO1xuXHRcdH07XG5cdH1cblxuXHQvKiogVGhyZWFkIHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgJ3RocmVhZHMnLlxuXHRcdFRoZSByZXF1ZXN0IHJldHJpZXZlcyBhIGxpc3Qgb2YgYWxsIHRocmVhZHMuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkc1JlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcblx0XHQvLyBjb21tYW5kOiAndGhyZWFkcyc7XG5cdH1cblxuXHQvKiogUmVzcG9uc2UgdG8gJ3RocmVhZHMnIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkc1Jlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBBbGwgdGhyZWFkcy4gKi9cblx0XHRcdHRocmVhZHM6IFRocmVhZFtdO1xuXHRcdH07XG5cdH1cblxuXHQvKiogTW9kdWxlcyBjYW4gYmUgcmV0cmlldmVkIGZyb20gdGhlIGRlYnVnIGFkYXB0ZXIgd2l0aCB0aGUgTW9kdWxlc1JlcXVlc3Qgd2hpY2ggY2FuIGVpdGhlciByZXR1cm4gYWxsIG1vZHVsZXMgb3IgYSByYW5nZSBvZiBtb2R1bGVzIHRvIHN1cHBvcnQgcGFnaW5nLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIE1vZHVsZXNSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0Ly8gY29tbWFuZDogJ21vZHVsZXMnO1xuXHRcdGFyZ3VtZW50czogTW9kdWxlc0FyZ3VtZW50cztcblx0fVxuXG5cdC8qKiBBcmd1bWVudHMgZm9yICdtb2R1bGVzJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIE1vZHVsZXNBcmd1bWVudHMge1xuXHRcdC8qKiBUaGUgaW5kZXggb2YgdGhlIGZpcnN0IG1vZHVsZSB0byByZXR1cm47IGlmIG9taXR0ZWQgbW9kdWxlcyBzdGFydCBhdCAwLiAqL1xuXHRcdHN0YXJ0TW9kdWxlPzogbnVtYmVyO1xuXHRcdC8qKiBUaGUgbnVtYmVyIG9mIG1vZHVsZXMgdG8gcmV0dXJuLiBJZiBtb2R1bGVDb3VudCBpcyBub3Qgc3BlY2lmaWVkIG9yIDAsIGFsbCBtb2R1bGVzIGFyZSByZXR1cm5lZC4gKi9cblx0XHRtb2R1bGVDb3VudD86IG51bWJlcjtcblx0fVxuXG5cdC8qKiBSZXNwb25zZSB0byAnbW9kdWxlcycgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBNb2R1bGVzUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIEFsbCBtb2R1bGVzIG9yIHJhbmdlIG9mIG1vZHVsZXMuICovXG5cdFx0XHRtb2R1bGVzOiBNb2R1bGVbXTtcblx0XHRcdC8qKiBUaGUgdG90YWwgbnVtYmVyIG9mIG1vZHVsZXMgYXZhaWxhYmxlLiAqL1xuXHRcdFx0dG90YWxNb2R1bGVzPzogbnVtYmVyO1xuXHRcdH07XG5cdH1cblxuXHQvKiogRXZhbHVhdGUgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyAnZXZhbHVhdGUnLlxuXHRcdEV2YWx1YXRlcyB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiBpbiB0aGUgY29udGV4dCBvZiB0aGUgdG9wIG1vc3Qgc3RhY2sgZnJhbWUuXG5cdFx0VGhlIGV4cHJlc3Npb24gaGFzIGFjY2VzcyB0byBhbnkgdmFyaWFibGVzIGFuZCBhcmd1bWVudHMgdGhhdCBhcmUgaW4gc2NvcGUuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgRXZhbHVhdGVSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0Ly8gY29tbWFuZDogJ2V2YWx1YXRlJztcblx0XHRhcmd1bWVudHM6IEV2YWx1YXRlQXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ2V2YWx1YXRlJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEV2YWx1YXRlQXJndW1lbnRzIHtcblx0XHQvKiogVGhlIGV4cHJlc3Npb24gdG8gZXZhbHVhdGUuICovXG5cdFx0ZXhwcmVzc2lvbjogc3RyaW5nO1xuXHRcdC8qKiBFdmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpbiB0aGUgc2NvcGUgb2YgdGhpcyBzdGFjayBmcmFtZS4gSWYgbm90IHNwZWNpZmllZCwgdGhlIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkIGluIHRoZSBnbG9iYWwgc2NvcGUuICovXG5cdFx0ZnJhbWVJZD86IG51bWJlcjtcblx0XHQvKiogVGhlIGNvbnRleHQgaW4gd2hpY2ggdGhlIGV2YWx1YXRlIHJlcXVlc3QgaXMgcnVuLiBQb3NzaWJsZSB2YWx1ZXMgYXJlICd3YXRjaCcgaWYgZXZhbHVhdGUgaXMgcnVuIGluIGEgd2F0Y2gsICdyZXBsJyBpZiBydW4gZnJvbSB0aGUgUkVQTCBjb25zb2xlLCBvciAnaG92ZXInIGlmIHJ1biBmcm9tIGEgZGF0YSBob3Zlci4gKi9cblx0XHRjb250ZXh0Pzogc3RyaW5nO1xuXHRcdC8qKiBTcGVjaWZpZXMgZGV0YWlscyBvbiBob3cgdG8gZm9ybWF0IHRoZSBFdmFsdWF0ZSByZXN1bHQuICovXG5cdFx0Zm9ybWF0PzogVmFsdWVGb3JtYXQ7XG5cdH1cblxuXHQvKiogUmVzcG9uc2UgdG8gJ2V2YWx1YXRlJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEV2YWx1YXRlUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIFRoZSByZXN1bHQgb2YgdGhlIGV2YWx1YXRlIHJlcXVlc3QuICovXG5cdFx0XHRyZXN1bHQ6IHN0cmluZztcblx0XHRcdC8qKiBUaGUgb3B0aW9uYWwgdHlwZSBvZiB0aGUgZXZhbHVhdGUgcmVzdWx0LiAqL1xuXHRcdFx0dHlwZT86IHN0cmluZztcblx0XHRcdC8qKiBJZiB2YXJpYWJsZXNSZWZlcmVuY2UgaXMgPiAwLCB0aGUgZXZhbHVhdGUgcmVzdWx0IGlzIHN0cnVjdHVyZWQgYW5kIGl0cyBjaGlsZHJlbiBjYW4gYmUgcmV0cmlldmVkIGJ5IHBhc3NpbmcgdmFyaWFibGVzUmVmZXJlbmNlIHRvIHRoZSBWYXJpYWJsZXNSZXF1ZXN0LiAqL1xuXHRcdFx0dmFyaWFibGVzUmVmZXJlbmNlOiBudW1iZXI7XG5cdFx0XHQvKiogVGhlIG51bWJlciBvZiBuYW1lZCBjaGlsZCB2YXJpYWJsZXMuXG5cdFx0XHRcdFRoZSBjbGllbnQgY2FuIHVzZSB0aGlzIG9wdGlvbmFsIGluZm9ybWF0aW9uIHRvIHByZXNlbnQgdGhlIHZhcmlhYmxlcyBpbiBhIHBhZ2VkIFVJIGFuZCBmZXRjaCB0aGVtIGluIGNodW5rcy5cblx0XHRcdCovXG5cdFx0XHRuYW1lZFZhcmlhYmxlcz86IG51bWJlcjtcblx0XHRcdC8qKiBUaGUgbnVtYmVyIG9mIGluZGV4ZWQgY2hpbGQgdmFyaWFibGVzLlxuXHRcdFx0XHRUaGUgY2xpZW50IGNhbiB1c2UgdGhpcyBvcHRpb25hbCBpbmZvcm1hdGlvbiB0byBwcmVzZW50IHRoZSB2YXJpYWJsZXMgaW4gYSBwYWdlZCBVSSBhbmQgZmV0Y2ggdGhlbSBpbiBjaHVua3MuXG5cdFx0XHQqL1xuXHRcdFx0aW5kZXhlZFZhcmlhYmxlcz86IG51bWJlcjtcblx0XHR9O1xuXHR9XG5cblx0LyoqIFN0ZXBJblRhcmdldHMgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyAnc3RlcEluVGFyZ2V0cycuXG5cdFx0VGhpcyByZXF1ZXN0IHJldHJpZXZlcyB0aGUgcG9zc2libGUgc3RlcEluIHRhcmdldHMgZm9yIHRoZSBzcGVjaWZpZWQgc3RhY2sgZnJhbWUuXG5cdFx0VGhlc2UgdGFyZ2V0cyBjYW4gYmUgdXNlZCBpbiB0aGUgJ3N0ZXBJbicgcmVxdWVzdC5cblx0XHRUaGUgU3RlcEluVGFyZ2V0cyBtYXkgb25seSBiZSBjYWxsZWQgaWYgdGhlICdzdXBwb3J0c1N0ZXBJblRhcmdldHNSZXF1ZXN0JyBjYXBhYmlsaXR5IGV4aXN0cyBhbmQgaXMgdHJ1ZS5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBTdGVwSW5UYXJnZXRzUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdC8vIGNvbW1hbmQ6ICdzdGVwSW5UYXJnZXRzJztcblx0XHRhcmd1bWVudHM6IFN0ZXBJblRhcmdldHNBcmd1bWVudHM7XG5cdH1cblxuXHQvKiogQXJndW1lbnRzIGZvciAnc3RlcEluVGFyZ2V0cycgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTdGVwSW5UYXJnZXRzQXJndW1lbnRzIHtcblx0XHQvKiogVGhlIHN0YWNrIGZyYW1lIGZvciB3aGljaCB0byByZXRyaWV2ZSB0aGUgcG9zc2libGUgc3RlcEluIHRhcmdldHMuICovXG5cdFx0ZnJhbWVJZDogbnVtYmVyO1xuXHR9XG5cblx0LyoqIFJlc3BvbnNlIHRvICdzdGVwSW5UYXJnZXRzJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0ZXBJblRhcmdldHNSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcblx0XHRib2R5OiB7XG5cdFx0XHQvKiogVGhlIHBvc3NpYmxlIHN0ZXBJbiB0YXJnZXRzIG9mIHRoZSBzcGVjaWZpZWQgc291cmNlIGxvY2F0aW9uLiAqL1xuXHRcdFx0dGFyZ2V0czogU3RlcEluVGFyZ2V0W107XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBHb3RvVGFyZ2V0cyByZXF1ZXN0OyB2YWx1ZSBvZiBjb21tYW5kIGZpZWxkIGlzICdnb3RvVGFyZ2V0cycuXG5cdFx0VGhpcyByZXF1ZXN0IHJldHJpZXZlcyB0aGUgcG9zc2libGUgZ290byB0YXJnZXRzIGZvciB0aGUgc3BlY2lmaWVkIHNvdXJjZSBsb2NhdGlvbi5cblx0XHRUaGVzZSB0YXJnZXRzIGNhbiBiZSB1c2VkIGluIHRoZSAnZ290bycgcmVxdWVzdC5cblx0XHRUaGUgR290b1RhcmdldHMgcmVxdWVzdCBtYXkgb25seSBiZSBjYWxsZWQgaWYgdGhlICdzdXBwb3J0c0dvdG9UYXJnZXRzUmVxdWVzdCcgY2FwYWJpbGl0eSBleGlzdHMgYW5kIGlzIHRydWUuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgR290b1RhcmdldHNSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0Ly8gY29tbWFuZDogJ2dvdG9UYXJnZXRzJztcblx0XHRhcmd1bWVudHM6IEdvdG9UYXJnZXRzQXJndW1lbnRzO1xuXHR9XG5cblx0LyoqIEFyZ3VtZW50cyBmb3IgJ2dvdG9UYXJnZXRzJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEdvdG9UYXJnZXRzQXJndW1lbnRzIHtcblx0XHQvKiogVGhlIHNvdXJjZSBsb2NhdGlvbiBmb3Igd2hpY2ggdGhlIGdvdG8gdGFyZ2V0cyBhcmUgZGV0ZXJtaW5lZC4gKi9cblx0XHRzb3VyY2U6IFNvdXJjZTtcblx0XHQvKiogVGhlIGxpbmUgbG9jYXRpb24gZm9yIHdoaWNoIHRoZSBnb3RvIHRhcmdldHMgYXJlIGRldGVybWluZWQuICovXG5cdFx0bGluZTogbnVtYmVyO1xuXHRcdC8qKiBBbiBvcHRpb25hbCBjb2x1bW4gbG9jYXRpb24gZm9yIHdoaWNoIHRoZSBnb3RvIHRhcmdldHMgYXJlIGRldGVybWluZWQuICovXG5cdFx0Y29sdW1uPzogbnVtYmVyO1xuXHR9XG5cblx0LyoqIFJlc3BvbnNlIHRvICdnb3RvVGFyZ2V0cycgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBHb3RvVGFyZ2V0c1Jlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBUaGUgcG9zc2libGUgZ290byB0YXJnZXRzIG9mIHRoZSBzcGVjaWZpZWQgbG9jYXRpb24uICovXG5cdFx0XHR0YXJnZXRzOiBHb3RvVGFyZ2V0W107XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBDb21wbGV0aW9uc1JlcXVlc3QgcmVxdWVzdDsgdmFsdWUgb2YgY29tbWFuZCBmaWVsZCBpcyAnY29tcGxldGlvbnMnLlxuXHRcdFJldHVybnMgYSBsaXN0IG9mIHBvc3NpYmxlIGNvbXBsZXRpb25zIGZvciBhIGdpdmVuIGNhcmV0IHBvc2l0aW9uIGFuZCB0ZXh0LlxuXHRcdFRoZSBDb21wbGV0aW9uc1JlcXVlc3QgbWF5IG9ubHkgYmUgY2FsbGVkIGlmIHRoZSAnc3VwcG9ydHNDb21wbGV0aW9uc1JlcXVlc3QnIGNhcGFiaWxpdHkgZXhpc3RzIGFuZCBpcyB0cnVlLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIENvbXBsZXRpb25zUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRcdC8vIGNvbW1hbmQ6ICdjb21wbGV0aW9ucyc7XG5cdFx0YXJndW1lbnRzOiBDb21wbGV0aW9uc0FyZ3VtZW50cztcblx0fVxuXG5cdC8qKiBBcmd1bWVudHMgZm9yICdjb21wbGV0aW9ucycgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBDb21wbGV0aW9uc0FyZ3VtZW50cyB7XG5cdFx0LyoqIFJldHVybnMgY29tcGxldGlvbnMgaW4gdGhlIHNjb3BlIG9mIHRoaXMgc3RhY2sgZnJhbWUuIElmIG5vdCBzcGVjaWZpZWQsIHRoZSBjb21wbGV0aW9ucyBhcmUgcmV0dXJuZWQgZm9yIHRoZSBnbG9iYWwgc2NvcGUuICovXG5cdFx0ZnJhbWVJZD86IG51bWJlcjtcblx0XHQvKiogT25lIG9yIG1vcmUgc291cmNlIGxpbmVzLiBUeXBpY2FsbHkgdGhpcyBpcyB0aGUgdGV4dCBhIHVzZXIgaGFzIHR5cGVkIGludG8gdGhlIGRlYnVnIGNvbnNvbGUgYmVmb3JlIGhlIGFza2VkIGZvciBjb21wbGV0aW9uLiAqL1xuXHRcdHRleHQ6IHN0cmluZztcblx0XHQvKiogVGhlIGNoYXJhY3RlciBwb3NpdGlvbiBmb3Igd2hpY2ggdG8gZGV0ZXJtaW5lIHRoZSBjb21wbGV0aW9uIHByb3Bvc2Fscy4gKi9cblx0XHRjb2x1bW46IG51bWJlcjtcblx0XHQvKiogQW4gb3B0aW9uYWwgbGluZSBmb3Igd2hpY2ggdG8gZGV0ZXJtaW5lIHRoZSBjb21wbGV0aW9uIHByb3Bvc2Fscy4gSWYgbWlzc2luZyB0aGUgZmlyc3QgbGluZSBvZiB0aGUgdGV4dCBpcyBhc3N1bWVkLiAqL1xuXHRcdGxpbmU/OiBudW1iZXI7XG5cdH1cblxuXHQvKiogUmVzcG9uc2UgdG8gJ2NvbXBsZXRpb25zJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIENvbXBsZXRpb25zUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG5cdFx0Ym9keToge1xuXHRcdFx0LyoqIFRoZSBwb3NzaWJsZSBjb21wbGV0aW9ucyBmb3IgLiAqL1xuXHRcdFx0dGFyZ2V0czogQ29tcGxldGlvbkl0ZW1bXTtcblx0XHR9O1xuXHR9XG5cblx0LyoqIEV4Y2VwdGlvbkluZm9SZXF1ZXN0IHJlcXVlc3Q7IHZhbHVlIG9mIGNvbW1hbmQgZmllbGQgaXMgJ2V4Y2VwdGlvbkluZm8nLlxuXHRcdFJldHJpZXZlcyB0aGUgZGV0YWlscyBvZiB0aGUgZXhjZXB0aW9uIHRoYXQgY2F1c2VkIHRoZSBTdG9wcGVkRXZlbnQgdG8gYmUgcmFpc2VkLlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEV4Y2VwdGlvbkluZm9SZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG5cdFx0Ly8gY29tbWFuZDogJ2V4Y2VwdGlvbkluZm8nO1xuXHRcdGFyZ3VtZW50czogRXhjZXB0aW9uSW5mb0FyZ3VtZW50cztcblx0fVxuXG5cdC8qKiBBcmd1bWVudHMgZm9yICdleGNlcHRpb25JbmZvJyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEV4Y2VwdGlvbkluZm9Bcmd1bWVudHMge1xuXHRcdC8qKiBUaHJlYWQgZm9yIHdoaWNoIGV4Y2VwdGlvbiBpbmZvcm1hdGlvbiBzaG91bGQgYmUgcmV0cmlldmVkLiAqL1xuXHRcdHRocmVhZElkOiBudW1iZXI7XG5cdH1cblxuXHQvKiogUmVzcG9uc2UgdG8gJ2V4Y2VwdGlvbkluZm8nIHJlcXVlc3QuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgRXhjZXB0aW9uSW5mb1Jlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuXHRcdGJvZHk6IHtcblx0XHRcdC8qKiBJRCBvZiB0aGUgZXhjZXB0aW9uIHRoYXQgd2FzIHRocm93bi4gKi9cblx0XHRcdGV4Y2VwdGlvbklkOiBzdHJpbmc7XG5cdFx0XHQvKiogRGVzY3JpcHRpdmUgdGV4dCBmb3IgdGhlIGV4Y2VwdGlvbiBwcm92aWRlZCBieSB0aGUgZGVidWcgYWRhcHRlci4gKi9cblx0XHRcdGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuXHRcdFx0LyoqIE1vZGUgdGhhdCBjYXVzZWQgdGhlIGV4Y2VwdGlvbiBub3RpZmljYXRpb24gdG8gYmUgcmFpc2VkLiAqL1xuXHRcdFx0YnJlYWtNb2RlOiBFeGNlcHRpb25CcmVha01vZGU7XG5cdFx0XHQvKiogRGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGV4Y2VwdGlvbi4gKi9cblx0XHRcdGRldGFpbHM/OiBFeGNlcHRpb25EZXRhaWxzO1xuXHRcdH07XG5cdH1cblxuXHQvKiogSW5mb3JtYXRpb24gYWJvdXQgdGhlIGNhcGFiaWxpdGllcyBvZiBhIGRlYnVnIGFkYXB0ZXIuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQ2FwYWJpbGl0aWVzIHtcblx0XHQvKiogVGhlIGRlYnVnIGFkYXB0ZXIgc3VwcG9ydHMgdGhlIGNvbmZpZ3VyYXRpb25Eb25lUmVxdWVzdC4gKi9cblx0XHRzdXBwb3J0c0NvbmZpZ3VyYXRpb25Eb25lUmVxdWVzdD86IGJvb2xlYW47XG5cdFx0LyoqIFRoZSBkZWJ1ZyBhZGFwdGVyIHN1cHBvcnRzIGZ1bmN0aW9uIGJyZWFrcG9pbnRzLiAqL1xuXHRcdHN1cHBvcnRzRnVuY3Rpb25CcmVha3BvaW50cz86IGJvb2xlYW47XG5cdFx0LyoqIFRoZSBkZWJ1ZyBhZGFwdGVyIHN1cHBvcnRzIGNvbmRpdGlvbmFsIGJyZWFrcG9pbnRzLiAqL1xuXHRcdHN1cHBvcnRzQ29uZGl0aW9uYWxCcmVha3BvaW50cz86IGJvb2xlYW47XG5cdFx0LyoqIFRoZSBkZWJ1ZyBhZGFwdGVyIHN1cHBvcnRzIGJyZWFrcG9pbnRzIHRoYXQgYnJlYWsgZXhlY3V0aW9uIGFmdGVyIGEgc3BlY2lmaWVkIG51bWJlciBvZiBoaXRzLiAqL1xuXHRcdHN1cHBvcnRzSGl0Q29uZGl0aW9uYWxCcmVha3BvaW50cz86IGJvb2xlYW47XG5cdFx0LyoqIFRoZSBkZWJ1ZyBhZGFwdGVyIHN1cHBvcnRzIGEgKHNpZGUgZWZmZWN0IGZyZWUpIGV2YWx1YXRlIHJlcXVlc3QgZm9yIGRhdGEgaG92ZXJzLiAqL1xuXHRcdHN1cHBvcnRzRXZhbHVhdGVGb3JIb3ZlcnM/OiBib29sZWFuO1xuXHRcdC8qKiBBdmFpbGFibGUgZmlsdGVycyBvciBvcHRpb25zIGZvciB0aGUgc2V0RXhjZXB0aW9uQnJlYWtwb2ludHMgcmVxdWVzdC4gKi9cblx0XHRleGNlcHRpb25CcmVha3BvaW50RmlsdGVycz86IEV4Y2VwdGlvbkJyZWFrcG9pbnRzRmlsdGVyW107XG5cdFx0LyoqIFRoZSBkZWJ1ZyBhZGFwdGVyIHN1cHBvcnRzIHN0ZXBwaW5nIGJhY2sgdmlhIHRoZSBzdGVwQmFjayBhbmQgcmV2ZXJzZUNvbnRpbnVlIHJlcXVlc3RzLiAqL1xuXHRcdHN1cHBvcnRzU3RlcEJhY2s/OiBib29sZWFuO1xuXHRcdC8qKiBUaGUgZGVidWcgYWRhcHRlciBzdXBwb3J0cyBzZXR0aW5nIGEgdmFyaWFibGUgdG8gYSB2YWx1ZS4gKi9cblx0XHRzdXBwb3J0c1NldFZhcmlhYmxlPzogYm9vbGVhbjtcblx0XHQvKiogVGhlIGRlYnVnIGFkYXB0ZXIgc3VwcG9ydHMgcmVzdGFydGluZyBhIGZyYW1lLiAqL1xuXHRcdHN1cHBvcnRzUmVzdGFydEZyYW1lPzogYm9vbGVhbjtcblx0XHQvKiogVGhlIGRlYnVnIGFkYXB0ZXIgc3VwcG9ydHMgdGhlIGdvdG9UYXJnZXRzUmVxdWVzdC4gKi9cblx0XHRzdXBwb3J0c0dvdG9UYXJnZXRzUmVxdWVzdD86IGJvb2xlYW47XG5cdFx0LyoqIFRoZSBkZWJ1ZyBhZGFwdGVyIHN1cHBvcnRzIHRoZSBzdGVwSW5UYXJnZXRzUmVxdWVzdC4gKi9cblx0XHRzdXBwb3J0c1N0ZXBJblRhcmdldHNSZXF1ZXN0PzogYm9vbGVhbjtcblx0XHQvKiogVGhlIGRlYnVnIGFkYXB0ZXIgc3VwcG9ydHMgdGhlIGNvbXBsZXRpb25zUmVxdWVzdC4gKi9cblx0XHRzdXBwb3J0c0NvbXBsZXRpb25zUmVxdWVzdD86IGJvb2xlYW47XG5cdFx0LyoqIFRoZSBkZWJ1ZyBhZGFwdGVyIHN1cHBvcnRzIHRoZSBtb2R1bGVzIHJlcXVlc3QuICovXG5cdFx0c3VwcG9ydHNNb2R1bGVzUmVxdWVzdD86IGJvb2xlYW47XG5cdFx0LyoqIFRoZSBzZXQgb2YgYWRkaXRpb25hbCBtb2R1bGUgaW5mb3JtYXRpb24gZXhwb3NlZCBieSB0aGUgZGVidWcgYWRhcHRlci4gKi9cblx0XHRhZGRpdGlvbmFsTW9kdWxlQ29sdW1ucz86IENvbHVtbkRlc2NyaXB0b3JbXTtcblx0XHQvKiogQ2hlY2tzdW0gYWxnb3JpdGhtcyBzdXBwb3J0ZWQgYnkgdGhlIGRlYnVnIGFkYXB0ZXIuICovXG5cdFx0c3VwcG9ydGVkQ2hlY2tzdW1BbGdvcml0aG1zPzogQ2hlY2tzdW1BbGdvcml0aG1bXTtcblx0XHQvKiogVGhlIGRlYnVnIGFkYXB0ZXIgc3VwcG9ydHMgdGhlIFJlc3RhcnRSZXF1ZXN0LiBJbiB0aGlzIGNhc2UgYSBjbGllbnQgc2hvdWxkIG5vdCBpbXBsZW1lbnQgJ3Jlc3RhcnQnIGJ5IHRlcm1pbmF0aW5nIGFuZCByZWxhdW5jaGluZyB0aGUgYWRhcHRlciBidXQgYnkgY2FsbGluZyB0aGUgUmVzdGFydFJlcXVlc3QuICovXG5cdFx0c3VwcG9ydHNSZXN0YXJ0UmVxdWVzdD86IGJvb2xlYW47XG5cdFx0LyoqIFRoZSBkZWJ1ZyBhZGFwdGVyIHN1cHBvcnRzICdleGNlcHRpb25PcHRpb25zJyBvbiB0aGUgc2V0RXhjZXB0aW9uQnJlYWtwb2ludHMgcmVxdWVzdC4gKi9cblx0XHRzdXBwb3J0c0V4Y2VwdGlvbk9wdGlvbnM/OiBib29sZWFuO1xuXHRcdC8qKiBUaGUgZGVidWcgYWRhcHRlciBzdXBwb3J0cyBhICdmb3JtYXQnIGF0dHJpYnV0ZSBvbiB0aGUgc3RhY2tUcmFjZVJlcXVlc3QsIHZhcmlhYmxlc1JlcXVlc3QsIGFuZCBldmFsdWF0ZVJlcXVlc3QuICovXG5cdFx0c3VwcG9ydHNWYWx1ZUZvcm1hdHRpbmdPcHRpb25zPzogYm9vbGVhbjtcblx0XHQvKiogVGhlIGRlYnVnIGFkYXB0ZXIgc3VwcG9ydHMgdGhlIGV4Y2VwdGlvbkluZm8gcmVxdWVzdC4gKi9cblx0XHRzdXBwb3J0c0V4Y2VwdGlvbkluZm9SZXF1ZXN0PzogYm9vbGVhbjtcblx0fVxuXG5cdC8qKiBBbiBFeGNlcHRpb25CcmVha3BvaW50c0ZpbHRlciBpcyBzaG93biBpbiB0aGUgVUkgYXMgYW4gb3B0aW9uIGZvciBjb25maWd1cmluZyBob3cgZXhjZXB0aW9ucyBhcmUgZGVhbHQgd2l0aC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBFeGNlcHRpb25CcmVha3BvaW50c0ZpbHRlciB7XG5cdFx0LyoqIFRoZSBpbnRlcm5hbCBJRCBvZiB0aGUgZmlsdGVyLiBUaGlzIHZhbHVlIGlzIHBhc3NlZCB0byB0aGUgc2V0RXhjZXB0aW9uQnJlYWtwb2ludHMgcmVxdWVzdC4gKi9cblx0XHRmaWx0ZXI6IHN0cmluZztcblx0XHQvKiogVGhlIG5hbWUgb2YgdGhlIGZpbHRlci4gVGhpcyB3aWxsIGJlIHNob3duIGluIHRoZSBVSS4gKi9cblx0XHRsYWJlbDogc3RyaW5nO1xuXHRcdC8qKiBJbml0aWFsIHZhbHVlIG9mIHRoZSBmaWx0ZXIuIElmIG5vdCBzcGVjaWZpZWQgYSB2YWx1ZSAnZmFsc2UnIGlzIGFzc3VtZWQuICovXG5cdFx0ZGVmYXVsdD86IGJvb2xlYW47XG5cdH1cblxuXHQvKiogQSBzdHJ1Y3R1cmVkIG1lc3NhZ2Ugb2JqZWN0LiBVc2VkIHRvIHJldHVybiBlcnJvcnMgZnJvbSByZXF1ZXN0cy4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlIHtcblx0XHQvKiogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBtZXNzYWdlLiAqL1xuXHRcdGlkOiBudW1iZXI7XG5cdFx0LyoqIEEgZm9ybWF0IHN0cmluZyBmb3IgdGhlIG1lc3NhZ2UuIEVtYmVkZGVkIHZhcmlhYmxlcyBoYXZlIHRoZSBmb3JtICd7bmFtZX0nLlxuXHRcdFx0SWYgdmFyaWFibGUgbmFtZSBzdGFydHMgd2l0aCBhbiB1bmRlcnNjb3JlIGNoYXJhY3RlciwgdGhlIHZhcmlhYmxlIGRvZXMgbm90IGNvbnRhaW4gdXNlciBkYXRhIChQSUkpIGFuZCBjYW4gYmUgc2FmZWx5IHVzZWQgZm9yIHRlbGVtZXRyeSBwdXJwb3Nlcy5cblx0XHQqL1xuXHRcdGZvcm1hdDogc3RyaW5nO1xuXHRcdC8qKiBBbiBvYmplY3QgdXNlZCBhcyBhIGRpY3Rpb25hcnkgZm9yIGxvb2tpbmcgdXAgdGhlIHZhcmlhYmxlcyBpbiB0aGUgZm9ybWF0IHN0cmluZy4gKi9cblx0XHR2YXJpYWJsZXM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZzsgfTtcblx0XHQvKiogSWYgdHJ1ZSBzZW5kIHRvIHRlbGVtZXRyeS4gKi9cblx0XHRzZW5kVGVsZW1ldHJ5PzogYm9vbGVhbjtcblx0XHQvKiogSWYgdHJ1ZSBzaG93IHVzZXIuICovXG5cdFx0c2hvd1VzZXI/OiBib29sZWFuO1xuXHRcdC8qKiBBbiBvcHRpb25hbCB1cmwgd2hlcmUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGlzIG1lc3NhZ2UgY2FuIGJlIGZvdW5kLiAqL1xuXHRcdHVybD86IHN0cmluZztcblx0XHQvKiogQW4gb3B0aW9uYWwgbGFiZWwgdGhhdCBpcyBwcmVzZW50ZWQgdG8gdGhlIHVzZXIgYXMgdGhlIFVJIGZvciBvcGVuaW5nIHRoZSB1cmwuICovXG5cdFx0dXJsTGFiZWw/OiBzdHJpbmc7XG5cdH1cblxuXHQvKiogQSBNb2R1bGUgb2JqZWN0IHJlcHJlc2VudHMgYSByb3cgaW4gdGhlIG1vZHVsZXMgdmlldy5cblx0XHRUd28gYXR0cmlidXRlcyBhcmUgbWFuZGF0b3J5OiBhbiBpZCBpZGVudGlmaWVzIGEgbW9kdWxlIGluIHRoZSBtb2R1bGVzIHZpZXcgYW5kIGlzIHVzZWQgaW4gYSBNb2R1bGVFdmVudCBmb3IgaWRlbnRpZnlpbmcgYSBtb2R1bGUgZm9yIGFkZGluZywgdXBkYXRpbmcgb3IgZGVsZXRpbmcuXG5cdFx0VGhlIG5hbWUgaXMgdXNlZCB0byBtaW5pbWFsbHkgcmVuZGVyIHRoZSBtb2R1bGUgaW4gdGhlIFVJLlxuXHRcdFxuXHRcdEFkZGl0aW9uYWwgYXR0cmlidXRlcyBjYW4gYmUgYWRkZWQgdG8gdGhlIG1vZHVsZS4gVGhleSB3aWxsIHNob3cgdXAgaW4gdGhlIG1vZHVsZSBWaWV3IGlmIHRoZXkgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgQ29sdW1uRGVzY3JpcHRvci5cblx0XHRcblx0XHRUbyBhdm9pZCBhbiB1bm5lY2Vzc2FyeSBwcm9saWZlcmF0aW9uIG9mIGFkZGl0aW9uYWwgYXR0cmlidXRlcyB3aXRoIHNpbWlsYXIgc2VtYW50aWNzIGJ1dCBkaWZmZXJlbnQgbmFtZXNcblx0XHR3ZSByZWNvbW1lbmQgdG8gcmUtdXNlIGF0dHJpYnV0ZXMgZnJvbSB0aGUgJ3JlY29tbWVuZGVkJyBsaXN0IGJlbG93IGZpcnN0LCBhbmQgb25seSBpbnRyb2R1Y2UgbmV3IGF0dHJpYnV0ZXMgaWYgbm90aGluZyBhcHByb3ByaWF0ZSBjb3VsZCBiZSBmb3VuZC5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBNb2R1bGUge1xuXHRcdC8qKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIG1vZHVsZS4gKi9cblx0XHRpZDogbnVtYmVyIHwgc3RyaW5nO1xuXHRcdC8qKiBBIG5hbWUgb2YgdGhlIG1vZHVsZS4gKi9cblx0XHRuYW1lOiBzdHJpbmc7XG5cdFx0LyoqIG9wdGlvbmFsIGJ1dCByZWNvbW1lbmRlZCBhdHRyaWJ1dGVzLlxuXHRcdFx0YWx3YXlzIHRyeSB0byB1c2UgdGhlc2UgZmlyc3QgYmVmb3JlIGludHJvZHVjaW5nIGFkZGl0aW9uYWwgYXR0cmlidXRlcy5cblx0XHRcdFxuXHRcdFx0TG9naWNhbCBmdWxsIHBhdGggdG8gdGhlIG1vZHVsZS4gVGhlIGV4YWN0IGRlZmluaXRpb24gaXMgaW1wbGVtZW50YXRpb24gZGVmaW5lZCwgYnV0IHVzdWFsbHkgdGhpcyB3b3VsZCBiZSBhIGZ1bGwgcGF0aCB0byB0aGUgb24tZGlzayBmaWxlIGZvciB0aGUgbW9kdWxlLlxuXHRcdCovXG5cdFx0cGF0aD86IHN0cmluZztcblx0XHQvKiogVHJ1ZSBpZiB0aGUgbW9kdWxlIGlzIG9wdGltaXplZC4gKi9cblx0XHRpc09wdGltaXplZD86IGJvb2xlYW47XG5cdFx0LyoqIFRydWUgaWYgdGhlIG1vZHVsZSBpcyBjb25zaWRlcmVkICd1c2VyIGNvZGUnIGJ5IGEgZGVidWdnZXIgdGhhdCBzdXBwb3J0cyAnSnVzdCBNeSBDb2RlJy4gKi9cblx0XHRpc1VzZXJDb2RlPzogYm9vbGVhbjtcblx0XHQvKiogVmVyc2lvbiBvZiBNb2R1bGUuICovXG5cdFx0dmVyc2lvbj86IHN0cmluZztcblx0XHQvKiogVXNlciB1bmRlcnN0YW5kYWJsZSBkZXNjcmlwdGlvbiBvZiBpZiBzeW1ib2xzIHdlcmUgZm91bmQgZm9yIHRoZSBtb2R1bGUgKGV4OiAnU3ltYm9scyBMb2FkZWQnLCAnU3ltYm9scyBub3QgZm91bmQnLCBldGMuICovXG5cdFx0c3ltYm9sU3RhdHVzPzogc3RyaW5nO1xuXHRcdC8qKiBMb2dpY2FsIGZ1bGwgcGF0aCB0byB0aGUgc3ltYm9sIGZpbGUuIFRoZSBleGFjdCBkZWZpbml0aW9uIGlzIGltcGxlbWVudGF0aW9uIGRlZmluZWQuICovXG5cdFx0c3ltYm9sRmlsZVBhdGg/OiBzdHJpbmc7XG5cdFx0LyoqIE1vZHVsZSBjcmVhdGVkIG9yIG1vZGlmaWVkLiAqL1xuXHRcdGRhdGVUaW1lU3RhbXA/OiBzdHJpbmc7XG5cdFx0LyoqIEFkZHJlc3MgcmFuZ2UgY292ZXJlZCBieSB0aGlzIG1vZHVsZS4gKi9cblx0XHRhZGRyZXNzUmFuZ2U/OiBzdHJpbmc7XG5cdH1cblxuXHQvKiogQSBDb2x1bW5EZXNjcmlwdG9yIHNwZWNpZmllcyB3aGF0IG1vZHVsZSBhdHRyaWJ1dGUgdG8gc2hvdyBpbiBhIGNvbHVtbiBvZiB0aGUgTW9kdWxlc1ZpZXcsIGhvdyB0byBmb3JtYXQgaXQsIGFuZCB3aGF0IHRoZSBjb2x1bW4ncyBsYWJlbCBzaG91bGQgYmUuXG5cdFx0SXQgaXMgb25seSB1c2VkIGlmIHRoZSB1bmRlcmx5aW5nIFVJIGFjdHVhbGx5IHN1cHBvcnRzIHRoaXMgbGV2ZWwgb2YgY3VzdG9taXphdGlvbi5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBDb2x1bW5EZXNjcmlwdG9yIHtcblx0XHQvKiogTmFtZSBvZiB0aGUgYXR0cmlidXRlIHJlbmRlcmVkIGluIHRoaXMgY29sdW1uLiAqL1xuXHRcdGF0dHJpYnV0ZU5hbWU6IHN0cmluZztcblx0XHQvKiogSGVhZGVyIFVJIGxhYmVsIG9mIGNvbHVtbi4gKi9cblx0XHRsYWJlbDogc3RyaW5nO1xuXHRcdC8qKiBGb3JtYXQgdG8gdXNlIGZvciB0aGUgcmVuZGVyZWQgdmFsdWVzIGluIHRoaXMgY29sdW1uLiBUQkQgaG93IHRoZSBmb3JtYXQgc3RyaW5ncyBsb29rcyBsaWtlLiAqL1xuXHRcdGZvcm1hdD86IHN0cmluZztcblx0XHQvKiogRGF0YXR5cGUgb2YgdmFsdWVzIGluIHRoaXMgY29sdW1uLiAgRGVmYXVsdHMgdG8gJ3N0cmluZycgaWYgbm90IHNwZWNpZmllZC4gKi9cblx0XHR0eXBlPzogJ3N0cmluZycgfCAnbnVtYmVyJyB8ICdib29sZWFuJyB8ICd1bml4VGltZXN0YW1wVVRDJztcblx0XHQvKiogV2lkdGggb2YgdGhpcyBjb2x1bW4gaW4gY2hhcmFjdGVycyAoaGludCBvbmx5KS4gKi9cblx0XHR3aWR0aD86IG51bWJlcjtcblx0fVxuXG5cdC8qKiBUaGUgTW9kdWxlc1ZpZXdEZXNjcmlwdG9yIGlzIHRoZSBjb250YWluZXIgZm9yIGFsbCBkZWNsYXJhdGl2ZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgb2YgYSBNb2R1bGVWaWV3LlxuXHRcdEZvciBub3cgaXQgb25seSBzcGVjaWZpZXMgdGhlIGNvbHVtbnMgdG8gYmUgc2hvd24gaW4gdGhlIG1vZHVsZXMgdmlldy5cblx0Ki9cblx0ZXhwb3J0IGludGVyZmFjZSBNb2R1bGVzVmlld0Rlc2NyaXB0b3Ige1xuXHRcdGNvbHVtbnM6IENvbHVtbkRlc2NyaXB0b3JbXTtcblx0fVxuXG5cdC8qKiBBIFRocmVhZCAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFRocmVhZCB7XG5cdFx0LyoqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgdGhyZWFkLiAqL1xuXHRcdGlkOiBudW1iZXI7XG5cdFx0LyoqIEEgbmFtZSBvZiB0aGUgdGhyZWFkLiAqL1xuXHRcdG5hbWU6IHN0cmluZztcblx0fVxuXG5cdC8qKiBBIFNvdXJjZSBpcyBhIGRlc2NyaXB0b3IgZm9yIHNvdXJjZSBjb2RlLiBJdCBpcyByZXR1cm5lZCBmcm9tIHRoZSBkZWJ1ZyBhZGFwdGVyIGFzIHBhcnQgb2YgYSBTdGFja0ZyYW1lIGFuZCBpdCBpcyB1c2VkIGJ5IGNsaWVudHMgd2hlbiBzcGVjaWZ5aW5nIGJyZWFrcG9pbnRzLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFNvdXJjZSB7XG5cdFx0LyoqIFRoZSBzaG9ydCBuYW1lIG9mIHRoZSBzb3VyY2UuIEV2ZXJ5IHNvdXJjZSByZXR1cm5lZCBmcm9tIHRoZSBkZWJ1ZyBhZGFwdGVyIGhhcyBhIG5hbWUuIFdoZW4gc2VuZGluZyBhIHNvdXJjZSB0byB0aGUgZGVidWcgYWRhcHRlciB0aGlzIG5hbWUgaXMgb3B0aW9uYWwuICovXG5cdFx0bmFtZT86IHN0cmluZztcblx0XHQvKiogVGhlIHBhdGggb2YgdGhlIHNvdXJjZSB0byBiZSBzaG93biBpbiB0aGUgVUkuIEl0IGlzIG9ubHkgdXNlZCB0byBsb2NhdGUgYW5kIGxvYWQgdGhlIGNvbnRlbnQgb2YgdGhlIHNvdXJjZSBpZiBubyBzb3VyY2VSZWZlcmVuY2UgaXMgc3BlY2lmaWVkIChvciBpdHMgdmF1bGUgaXMgMCkuICovXG5cdFx0cGF0aD86IHN0cmluZztcblx0XHQvKiogSWYgc291cmNlUmVmZXJlbmNlID4gMCB0aGUgY29udGVudHMgb2YgdGhlIHNvdXJjZSBtdXN0IGJlIHJldHJpZXZlZCB0aHJvdWdoIHRoZSBTb3VyY2VSZXF1ZXN0IChldmVuIGlmIGEgcGF0aCBpcyBzcGVjaWZpZWQpLiBBIHNvdXJjZVJlZmVyZW5jZSBpcyBvbmx5IHZhbGlkIGZvciBhIHNlc3Npb24sIHNvIGl0IG11c3Qgbm90IGJlIHVzZWQgdG8gcGVyc2lzdCBhIHNvdXJjZS4gKi9cblx0XHRzb3VyY2VSZWZlcmVuY2U/OiBudW1iZXI7XG5cdFx0LyoqIEFuIG9wdGlvbmFsIGhpbnQgZm9yIGhvdyB0byBwcmVzZW50IHRoZSBzb3VyY2UgaW4gdGhlIFVJLiBBIHZhbHVlIG9mICdkZWVtcGhhc2l6ZScgY2FuIGJlIHVzZWQgdG8gaW5kaWNhdGUgdGhhdCB0aGUgc291cmNlIGlzIG5vdCBhdmFpbGFibGUgb3IgdGhhdCBpdCBpcyBza2lwcGVkIG9uIHN0ZXBwaW5nLiAqL1xuXHRcdHByZXNlbnRhdGlvbkhpbnQ/OiAnZW1waGFzaXplJyB8ICdkZWVtcGhhc2l6ZSc7XG5cdFx0LyoqIFRoZSAob3B0aW9uYWwpIG9yaWdpbiBvZiB0aGlzIHNvdXJjZTogcG9zc2libGUgdmFsdWVzICdpbnRlcm5hbCBtb2R1bGUnLCAnaW5saW5lZCBjb250ZW50IGZyb20gc291cmNlIG1hcCcsIGV0Yy4gKi9cblx0XHRvcmlnaW4/OiBzdHJpbmc7XG5cdFx0LyoqIE9wdGlvbmFsIGRhdGEgdGhhdCBhIGRlYnVnIGFkYXB0ZXIgbWlnaHQgd2FudCB0byBsb29wIHRocm91Z2ggdGhlIGNsaWVudC4gVGhlIGNsaWVudCBzaG91bGQgbGVhdmUgdGhlIGRhdGEgaW50YWN0IGFuZCBwZXJzaXN0IGl0IGFjcm9zcyBzZXNzaW9ucy4gVGhlIGNsaWVudCBzaG91bGQgbm90IGludGVycHJldCB0aGUgZGF0YS4gKi9cblx0XHRhZGFwdGVyRGF0YT86IGFueTtcblx0XHQvKiogVGhlIGNoZWNrc3VtcyBhc3NvY2lhdGVkIHdpdGggdGhpcyBmaWxlLiAqL1xuXHRcdGNoZWNrc3Vtcz86IENoZWNrc3VtW107XG5cdH1cblxuXHQvKiogQSBTdGFja2ZyYW1lIGNvbnRhaW5zIHRoZSBzb3VyY2UgbG9jYXRpb24uICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU3RhY2tGcmFtZSB7XG5cdFx0LyoqIEFuIGlkZW50aWZpZXIgZm9yIHRoZSBzdGFjayBmcmFtZS4gSXQgbXVzdCBiZSB1bmlxdWUgYWNyb3NzIGFsbCB0aHJlYWRzLiBUaGlzIGlkIGNhbiBiZSB1c2VkIHRvIHJldHJpZXZlIHRoZSBzY29wZXMgb2YgdGhlIGZyYW1lIHdpdGggdGhlICdzY29wZXNSZXF1ZXN0JyBvciB0byByZXN0YXJ0IHRoZSBleGVjdXRpb24gb2YgYSBzdGFja2ZyYW1lLiAqL1xuXHRcdGlkOiBudW1iZXI7XG5cdFx0LyoqIFRoZSBuYW1lIG9mIHRoZSBzdGFjayBmcmFtZSwgdHlwaWNhbGx5IGEgbWV0aG9kIG5hbWUuICovXG5cdFx0bmFtZTogc3RyaW5nO1xuXHRcdC8qKiBUaGUgb3B0aW9uYWwgc291cmNlIG9mIHRoZSBmcmFtZS4gKi9cblx0XHRzb3VyY2U/OiBTb3VyY2U7XG5cdFx0LyoqIFRoZSBsaW5lIHdpdGhpbiB0aGUgZmlsZSBvZiB0aGUgZnJhbWUuIElmIHNvdXJjZSBpcyBudWxsIG9yIGRvZXNuJ3QgZXhpc3QsIGxpbmUgaXMgMCBhbmQgbXVzdCBiZSBpZ25vcmVkLiAqL1xuXHRcdGxpbmU6IG51bWJlcjtcblx0XHQvKiogVGhlIGNvbHVtbiB3aXRoaW4gdGhlIGxpbmUuIElmIHNvdXJjZSBpcyBudWxsIG9yIGRvZXNuJ3QgZXhpc3QsIGNvbHVtbiBpcyAwIGFuZCBtdXN0IGJlIGlnbm9yZWQuICovXG5cdFx0Y29sdW1uOiBudW1iZXI7XG5cdFx0LyoqIEFuIG9wdGlvbmFsIGVuZCBsaW5lIG9mIHRoZSByYW5nZSBjb3ZlcmVkIGJ5IHRoZSBzdGFjayBmcmFtZS4gKi9cblx0XHRlbmRMaW5lPzogbnVtYmVyO1xuXHRcdC8qKiBBbiBvcHRpb25hbCBlbmQgY29sdW1uIG9mIHRoZSByYW5nZSBjb3ZlcmVkIGJ5IHRoZSBzdGFjayBmcmFtZS4gKi9cblx0XHRlbmRDb2x1bW4/OiBudW1iZXI7XG5cdFx0LyoqIFRoZSBtb2R1bGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZnJhbWUsIGlmIGFueS4gKi9cblx0XHRtb2R1bGVJZD86IG51bWJlciB8IHN0cmluZztcblx0fVxuXG5cdC8qKiBBIFNjb3BlIGlzIGEgbmFtZWQgY29udGFpbmVyIGZvciB2YXJpYWJsZXMuIE9wdGlvbmFsbHkgYSBzY29wZSBjYW4gbWFwIHRvIGEgc291cmNlIG9yIGEgcmFuZ2Ugd2l0aGluIGEgc291cmNlLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFNjb3BlIHtcblx0XHQvKiogTmFtZSBvZiB0aGUgc2NvcGUgc3VjaCBhcyAnQXJndW1lbnRzJywgJ0xvY2FscycuICovXG5cdFx0bmFtZTogc3RyaW5nO1xuXHRcdC8qKiBUaGUgdmFyaWFibGVzIG9mIHRoaXMgc2NvcGUgY2FuIGJlIHJldHJpZXZlZCBieSBwYXNzaW5nIHRoZSB2YWx1ZSBvZiB2YXJpYWJsZXNSZWZlcmVuY2UgdG8gdGhlIFZhcmlhYmxlc1JlcXVlc3QuICovXG5cdFx0dmFyaWFibGVzUmVmZXJlbmNlOiBudW1iZXI7XG5cdFx0LyoqIFRoZSBudW1iZXIgb2YgbmFtZWQgdmFyaWFibGVzIGluIHRoaXMgc2NvcGUuXG5cdFx0XHRUaGUgY2xpZW50IGNhbiB1c2UgdGhpcyBvcHRpb25hbCBpbmZvcm1hdGlvbiB0byBwcmVzZW50IHRoZSB2YXJpYWJsZXMgaW4gYSBwYWdlZCBVSSBhbmQgZmV0Y2ggdGhlbSBpbiBjaHVua3MuXG5cdFx0Ki9cblx0XHRuYW1lZFZhcmlhYmxlcz86IG51bWJlcjtcblx0XHQvKiogVGhlIG51bWJlciBvZiBpbmRleGVkIHZhcmlhYmxlcyBpbiB0aGlzIHNjb3BlLlxuXHRcdFx0VGhlIGNsaWVudCBjYW4gdXNlIHRoaXMgb3B0aW9uYWwgaW5mb3JtYXRpb24gdG8gcHJlc2VudCB0aGUgdmFyaWFibGVzIGluIGEgcGFnZWQgVUkgYW5kIGZldGNoIHRoZW0gaW4gY2h1bmtzLlxuXHRcdCovXG5cdFx0aW5kZXhlZFZhcmlhYmxlcz86IG51bWJlcjtcblx0XHQvKiogSWYgdHJ1ZSwgdGhlIG51bWJlciBvZiB2YXJpYWJsZXMgaW4gdGhpcyBzY29wZSBpcyBsYXJnZSBvciBleHBlbnNpdmUgdG8gcmV0cmlldmUuICovXG5cdFx0ZXhwZW5zaXZlOiBib29sZWFuO1xuXHRcdC8qKiBPcHRpb25hbCBzb3VyY2UgZm9yIHRoaXMgc2NvcGUuICovXG5cdFx0c291cmNlPzogU291cmNlO1xuXHRcdC8qKiBPcHRpb25hbCBzdGFydCBsaW5lIG9mIHRoZSByYW5nZSBjb3ZlcmVkIGJ5IHRoaXMgc2NvcGUuICovXG5cdFx0bGluZT86IG51bWJlcjtcblx0XHQvKiogT3B0aW9uYWwgc3RhcnQgY29sdW1uIG9mIHRoZSByYW5nZSBjb3ZlcmVkIGJ5IHRoaXMgc2NvcGUuICovXG5cdFx0Y29sdW1uPzogbnVtYmVyO1xuXHRcdC8qKiBPcHRpb25hbCBlbmQgbGluZSBvZiB0aGUgcmFuZ2UgY292ZXJlZCBieSB0aGlzIHNjb3BlLiAqL1xuXHRcdGVuZExpbmU/OiBudW1iZXI7XG5cdFx0LyoqIE9wdGlvbmFsIGVuZCBjb2x1bW4gb2YgdGhlIHJhbmdlIGNvdmVyZWQgYnkgdGhpcyBzY29wZS4gKi9cblx0XHRlbmRDb2x1bW4/OiBudW1iZXI7XG5cdH1cblxuXHQvKiogQSBWYXJpYWJsZSBpcyBhIG5hbWUvdmFsdWUgcGFpci5cblx0XHRPcHRpb25hbGx5IGEgdmFyaWFibGUgY2FuIGhhdmUgYSAndHlwZScgdGhhdCBpcyBzaG93biBpZiBzcGFjZSBwZXJtaXRzIG9yIHdoZW4gaG92ZXJpbmcgb3ZlciB0aGUgdmFyaWFibGUncyBuYW1lLlxuXHRcdEFuIG9wdGlvbmFsICdraW5kJyBpcyB1c2VkIHRvIHJlbmRlciBhZGRpdGlvbmFsIHByb3BlcnRpZXMgb2YgdGhlIHZhcmlhYmxlLCBlLmcuIGRpZmZlcmVudCBpY29ucyBjYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSB0aGF0IGEgdmFyaWFibGUgaXMgcHVibGljIG9yIHByaXZhdGUuXG5cdFx0SWYgdGhlIHZhbHVlIGlzIHN0cnVjdHVyZWQgKGhhcyBjaGlsZHJlbiksIGEgaGFuZGxlIGlzIHByb3ZpZGVkIHRvIHJldHJpZXZlIHRoZSBjaGlsZHJlbiB3aXRoIHRoZSBWYXJpYWJsZXNSZXF1ZXN0LlxuXHRcdElmIHRoZSBudW1iZXIgb2YgbmFtZWQgb3IgaW5kZXhlZCBjaGlsZHJlbiBpcyBsYXJnZSwgdGhlIG51bWJlcnMgc2hvdWxkIGJlIHJldHVybmVkIHZpYSB0aGUgb3B0aW9uYWwgJ25hbWVkVmFyaWFibGVzJyBhbmQgJ2luZGV4ZWRWYXJpYWJsZXMnIGF0dHJpYnV0ZXMuXG5cdFx0VGhlIGNsaWVudCBjYW4gdXNlIHRoaXMgb3B0aW9uYWwgaW5mb3JtYXRpb24gdG8gcHJlc2VudCB0aGUgY2hpbGRyZW4gaW4gYSBwYWdlZCBVSSBhbmQgZmV0Y2ggdGhlbSBpbiBjaHVua3MuXG5cdCovXG5cdGV4cG9ydCBpbnRlcmZhY2UgVmFyaWFibGUge1xuXHRcdC8qKiBUaGUgdmFyaWFibGUncyBuYW1lLiAqL1xuXHRcdG5hbWU6IHN0cmluZztcblx0XHQvKiogVGhlIHZhcmlhYmxlJ3MgdmFsdWUuIFRoaXMgY2FuIGJlIGEgbXVsdGktbGluZSB0ZXh0LCBlLmcuIGZvciBhIGZ1bmN0aW9uIHRoZSBib2R5IG9mIGEgZnVuY3Rpb24uICovXG5cdFx0dmFsdWU6IHN0cmluZztcblx0XHQvKiogVGhlIHR5cGUgb2YgdGhlIHZhcmlhYmxlJ3MgdmFsdWUuIFR5cGljYWxseSBzaG93biBpbiB0aGUgVUkgd2hlbiBob3ZlcmluZyBvdmVyIHRoZSB2YWx1ZS4gKi9cblx0XHR0eXBlPzogc3RyaW5nO1xuXHRcdC8qKiBQcm9wZXJ0aWVzIG9mIGEgdmFyaWFibGUgdGhhdCBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgaG93IHRvIHJlbmRlciB0aGUgdmFyaWFibGUgaW4gdGhlIFVJLiBGb3JtYXQgb2YgdGhlIHN0cmluZyB2YWx1ZTogVEJELiAqL1xuXHRcdGtpbmQ/OiBzdHJpbmc7XG5cdFx0LyoqIE9wdGlvbmFsIGV2YWx1YXRhYmxlIG5hbWUgb2YgdGhpcyB2YXJpYWJsZSB3aGljaCBjYW4gYmUgcGFzc2VkIHRvIHRoZSAnRXZhbHVhdGVSZXF1ZXN0JyB0byBmZXRjaCB0aGUgdmFyaWFibGUncyB2YWx1ZS4gKi9cblx0XHRldmFsdWF0ZU5hbWU/OiBzdHJpbmc7XG5cdFx0LyoqIElmIHZhcmlhYmxlc1JlZmVyZW5jZSBpcyA+IDAsIHRoZSB2YXJpYWJsZSBpcyBzdHJ1Y3R1cmVkIGFuZCBpdHMgY2hpbGRyZW4gY2FuIGJlIHJldHJpZXZlZCBieSBwYXNzaW5nIHZhcmlhYmxlc1JlZmVyZW5jZSB0byB0aGUgVmFyaWFibGVzUmVxdWVzdC4gKi9cblx0XHR2YXJpYWJsZXNSZWZlcmVuY2U6IG51bWJlcjtcblx0XHQvKiogVGhlIG51bWJlciBvZiBuYW1lZCBjaGlsZCB2YXJpYWJsZXMuXG5cdFx0XHRUaGUgY2xpZW50IGNhbiB1c2UgdGhpcyBvcHRpb25hbCBpbmZvcm1hdGlvbiB0byBwcmVzZW50IHRoZSBjaGlsZHJlbiBpbiBhIHBhZ2VkIFVJIGFuZCBmZXRjaCB0aGVtIGluIGNodW5rcy5cblx0XHQqL1xuXHRcdG5hbWVkVmFyaWFibGVzPzogbnVtYmVyO1xuXHRcdC8qKiBUaGUgbnVtYmVyIG9mIGluZGV4ZWQgY2hpbGQgdmFyaWFibGVzLlxuXHRcdFx0VGhlIGNsaWVudCBjYW4gdXNlIHRoaXMgb3B0aW9uYWwgaW5mb3JtYXRpb24gdG8gcHJlc2VudCB0aGUgY2hpbGRyZW4gaW4gYSBwYWdlZCBVSSBhbmQgZmV0Y2ggdGhlbSBpbiBjaHVua3MuXG5cdFx0Ki9cblx0XHRpbmRleGVkVmFyaWFibGVzPzogbnVtYmVyO1xuXHR9XG5cblx0LyoqIFByb3BlcnRpZXMgb2YgYSBicmVha3BvaW50IHBhc3NlZCB0byB0aGUgc2V0QnJlYWtwb2ludHMgcmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBTb3VyY2VCcmVha3BvaW50IHtcblx0XHQvKiogVGhlIHNvdXJjZSBsaW5lIG9mIHRoZSBicmVha3BvaW50LiAqL1xuXHRcdGxpbmU6IG51bWJlcjtcblx0XHQvKiogQW4gb3B0aW9uYWwgc291cmNlIGNvbHVtbiBvZiB0aGUgYnJlYWtwb2ludC4gKi9cblx0XHRjb2x1bW4/OiBudW1iZXI7XG5cdFx0LyoqIEFuIG9wdGlvbmFsIGV4cHJlc3Npb24gZm9yIGNvbmRpdGlvbmFsIGJyZWFrcG9pbnRzLiAqL1xuXHRcdGNvbmRpdGlvbj86IHN0cmluZztcblx0XHQvKiogQW4gb3B0aW9uYWwgZXhwcmVzc2lvbiB0aGF0IGNvbnRyb2xzIGhvdyBtYW55IGhpdHMgb2YgdGhlIGJyZWFrcG9pbnQgYXJlIGlnbm9yZWQuIFRoZSBiYWNrZW5kIGlzIGV4cGVjdGVkIHRvIGludGVycHJldCB0aGUgZXhwcmVzc2lvbiBhcyBuZWVkZWQuICovXG5cdFx0aGl0Q29uZGl0aW9uPzogc3RyaW5nO1xuXHR9XG5cblx0LyoqIFByb3BlcnRpZXMgb2YgYSBicmVha3BvaW50IHBhc3NlZCB0byB0aGUgc2V0RnVuY3Rpb25CcmVha3BvaW50cyByZXF1ZXN0LiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEZ1bmN0aW9uQnJlYWtwb2ludCB7XG5cdFx0LyoqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbi4gKi9cblx0XHRuYW1lOiBzdHJpbmc7XG5cdFx0LyoqIEFuIG9wdGlvbmFsIGV4cHJlc3Npb24gZm9yIGNvbmRpdGlvbmFsIGJyZWFrcG9pbnRzLiAqL1xuXHRcdGNvbmRpdGlvbj86IHN0cmluZztcblx0XHQvKiogQW4gb3B0aW9uYWwgZXhwcmVzc2lvbiB0aGF0IGNvbnRyb2xzIGhvdyBtYW55IGhpdHMgb2YgdGhlIGJyZWFrcG9pbnQgYXJlIGlnbm9yZWQuIFRoZSBiYWNrZW5kIGlzIGV4cGVjdGVkIHRvIGludGVycHJldCB0aGUgZXhwcmVzc2lvbiBhcyBuZWVkZWQuICovXG5cdFx0aGl0Q29uZGl0aW9uPzogc3RyaW5nO1xuXHR9XG5cblx0LyoqIEluZm9ybWF0aW9uIGFib3V0IGEgQnJlYWtwb2ludCBjcmVhdGVkIGluIHNldEJyZWFrcG9pbnRzIG9yIHNldEZ1bmN0aW9uQnJlYWtwb2ludHMuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQnJlYWtwb2ludCB7XG5cdFx0LyoqIEFuIG9wdGlvbmFsIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgYnJlYWtwb2ludC4gKi9cblx0XHRpZD86IG51bWJlcjtcblx0XHQvKiogSWYgdHJ1ZSBicmVha3BvaW50IGNvdWxkIGJlIHNldCAoYnV0IG5vdCBuZWNlc3NhcmlseSBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbikuICovXG5cdFx0dmVyaWZpZWQ6IGJvb2xlYW47XG5cdFx0LyoqIEFuIG9wdGlvbmFsIG1lc3NhZ2UgYWJvdXQgdGhlIHN0YXRlIG9mIHRoZSBicmVha3BvaW50LiBUaGlzIGlzIHNob3duIHRvIHRoZSB1c2VyIGFuZCBjYW4gYmUgdXNlZCB0byBleHBsYWluIHdoeSBhIGJyZWFrcG9pbnQgY291bGQgbm90IGJlIHZlcmlmaWVkLiAqL1xuXHRcdG1lc3NhZ2U/OiBzdHJpbmc7XG5cdFx0LyoqIFRoZSBzb3VyY2Ugd2hlcmUgdGhlIGJyZWFrcG9pbnQgaXMgbG9jYXRlZC4gKi9cblx0XHRzb3VyY2U/OiBTb3VyY2U7XG5cdFx0LyoqIFRoZSBzdGFydCBsaW5lIG9mIHRoZSBhY3R1YWwgcmFuZ2UgY292ZXJlZCBieSB0aGUgYnJlYWtwb2ludC4gKi9cblx0XHRsaW5lPzogbnVtYmVyO1xuXHRcdC8qKiBBbiBvcHRpb25hbCBzdGFydCBjb2x1bW4gb2YgdGhlIGFjdHVhbCByYW5nZSBjb3ZlcmVkIGJ5IHRoZSBicmVha3BvaW50LiAqL1xuXHRcdGNvbHVtbj86IG51bWJlcjtcblx0XHQvKiogQW4gb3B0aW9uYWwgZW5kIGxpbmUgb2YgdGhlIGFjdHVhbCByYW5nZSBjb3ZlcmVkIGJ5IHRoZSBicmVha3BvaW50LiAqL1xuXHRcdGVuZExpbmU/OiBudW1iZXI7XG5cdFx0LyoqIEFuIG9wdGlvbmFsIGVuZCBjb2x1bW4gb2YgdGhlIGFjdHVhbCByYW5nZSBjb3ZlcmVkIGJ5IHRoZSBicmVha3BvaW50LiBJZiBubyBlbmQgbGluZSBpcyBnaXZlbiwgdGhlbiB0aGUgZW5kIGNvbHVtbiBpcyBhc3N1bWVkIHRvIGJlIGluIHRoZSBzdGFydCBsaW5lLiAqL1xuXHRcdGVuZENvbHVtbj86IG51bWJlcjtcblx0fVxuXG5cdC8qKiBBIFN0ZXBJblRhcmdldCBjYW4gYmUgdXNlZCBpbiB0aGUgJ3N0ZXBJbicgcmVxdWVzdCBhbmQgZGV0ZXJtaW5lcyBpbnRvIHdoaWNoIHNpbmdsZSB0YXJnZXQgdGhlIHN0ZXBJbiByZXF1ZXN0IHNob3VsZCBzdGVwLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0ZXBJblRhcmdldCB7XG5cdFx0LyoqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciBhIHN0ZXBJbiB0YXJnZXQuICovXG5cdFx0aWQ6IG51bWJlcjtcblx0XHQvKiogVGhlIG5hbWUgb2YgdGhlIHN0ZXBJbiB0YXJnZXQgKHNob3duIGluIHRoZSBVSSkuICovXG5cdFx0bGFiZWw6IHN0cmluZztcblx0fVxuXG5cdC8qKiBBIEdvdG9UYXJnZXQgZGVzY3JpYmVzIGEgY29kZSBsb2NhdGlvbiB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdGFyZ2V0IGluIHRoZSAnZ290bycgcmVxdWVzdC5cblx0XHRUaGUgcG9zc2libGUgZ290byB0YXJnZXRzIGNhbiBiZSBkZXRlcm1pbmVkIHZpYSB0aGUgJ2dvdG9UYXJnZXRzJyByZXF1ZXN0LlxuXHQqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEdvdG9UYXJnZXQge1xuXHRcdC8qKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgYSBnb3RvIHRhcmdldC4gVGhpcyBpcyB1c2VkIGluIHRoZSBnb3RvIHJlcXVlc3QuICovXG5cdFx0aWQ6IG51bWJlcjtcblx0XHQvKiogVGhlIG5hbWUgb2YgdGhlIGdvdG8gdGFyZ2V0IChzaG93biBpbiB0aGUgVUkpLiAqL1xuXHRcdGxhYmVsOiBzdHJpbmc7XG5cdFx0LyoqIFRoZSBsaW5lIG9mIHRoZSBnb3RvIHRhcmdldC4gKi9cblx0XHRsaW5lOiBudW1iZXI7XG5cdFx0LyoqIEFuIG9wdGlvbmFsIGNvbHVtbiBvZiB0aGUgZ290byB0YXJnZXQuICovXG5cdFx0Y29sdW1uPzogbnVtYmVyO1xuXHRcdC8qKiBBbiBvcHRpb25hbCBlbmQgbGluZSBvZiB0aGUgcmFuZ2UgY292ZXJlZCBieSB0aGUgZ290byB0YXJnZXQuICovXG5cdFx0ZW5kTGluZT86IG51bWJlcjtcblx0XHQvKiogQW4gb3B0aW9uYWwgZW5kIGNvbHVtbiBvZiB0aGUgcmFuZ2UgY292ZXJlZCBieSB0aGUgZ290byB0YXJnZXQuICovXG5cdFx0ZW5kQ29sdW1uPzogbnVtYmVyO1xuXHR9XG5cblx0LyoqIENvbXBsZXRpb25JdGVtcyBhcmUgdGhlIHN1Z2dlc3Rpb25zIHJldHVybmVkIGZyb20gdGhlIENvbXBsZXRpb25zUmVxdWVzdC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBDb21wbGV0aW9uSXRlbSB7XG5cdFx0LyoqIFRoZSBsYWJlbCBvZiB0aGlzIGNvbXBsZXRpb24gaXRlbS4gQnkgZGVmYXVsdCB0aGlzIGlzIGFsc28gdGhlIHRleHQgdGhhdCBpcyBpbnNlcnRlZCB3aGVuIHNlbGVjdGluZyB0aGlzIGNvbXBsZXRpb24uICovXG5cdFx0bGFiZWw6IHN0cmluZztcblx0XHQvKiogSWYgdGV4dCBpcyBub3QgZmFsc3kgdGhlbiBpdCBpcyBpbnNlcnRlZCBpbnN0ZWFkIG9mIHRoZSBsYWJlbC4gKi9cblx0XHR0ZXh0Pzogc3RyaW5nO1xuXHRcdC8qKiBUaGUgaXRlbSdzIHR5cGUuIFR5cGljYWxseSB0aGUgY2xpZW50IHVzZXMgdGhpcyBpbmZvcm1hdGlvbiB0byByZW5kZXIgdGhlIGl0ZW0gaW4gdGhlIFVJIHdpdGggYW4gaWNvbi4gKi9cblx0XHR0eXBlPzogQ29tcGxldGlvbkl0ZW1UeXBlO1xuXHRcdC8qKiBUaGlzIHZhbHVlIGRldGVybWluZXMgdGhlIGxvY2F0aW9uIChpbiB0aGUgQ29tcGxldGlvbnNSZXF1ZXN0J3MgJ3RleHQnIGF0dHJpYnV0ZSkgd2hlcmUgdGhlIGNvbXBsZXRpb24gdGV4dCBpcyBhZGRlZC5cblx0XHRcdElmIG1pc3NpbmcgdGhlIHRleHQgaXMgYWRkZWQgYXQgdGhlIGxvY2F0aW9uIHNwZWNpZmllZCBieSB0aGUgQ29tcGxldGlvbnNSZXF1ZXN0J3MgJ2NvbHVtbicgYXR0cmlidXRlLlxuXHRcdCovXG5cdFx0c3RhcnQ/OiBudW1iZXI7XG5cdFx0LyoqIFRoaXMgdmFsdWUgZGV0ZXJtaW5lcyBob3cgbWFueSBjaGFyYWN0ZXJzIGFyZSBvdmVyd3JpdHRlbiBieSB0aGUgY29tcGxldGlvbiB0ZXh0LlxuXHRcdFx0SWYgbWlzc2luZyB0aGUgdmFsdWUgMCBpcyBhc3N1bWVkIHdoaWNoIHJlc3VsdHMgaW4gdGhlIGNvbXBsZXRpb24gdGV4dCBiZWluZyBpbnNlcnRlZC5cblx0XHQqL1xuXHRcdGxlbmd0aD86IG51bWJlcjtcblx0fVxuXG5cdC8qKiBTb21lIHByZWRlZmluZWQgdHlwZXMgZm9yIHRoZSBDb21wbGV0aW9uSXRlbS4gUGxlYXNlIG5vdGUgdGhhdCBub3QgYWxsIGNsaWVudHMgaGF2ZSBzcGVjaWZpYyBpY29ucyBmb3IgYWxsIG9mIHRoZW0uICovXG5cdGV4cG9ydCB0eXBlIENvbXBsZXRpb25JdGVtVHlwZSA9ICdtZXRob2QnIHwgJ2Z1bmN0aW9uJyB8ICdjb25zdHJ1Y3RvcicgfCAnZmllbGQnIHwgJ3ZhcmlhYmxlJyB8ICdjbGFzcycgfCAnaW50ZXJmYWNlJyB8ICdtb2R1bGUnIHwgJ3Byb3BlcnR5JyB8ICd1bml0JyB8ICd2YWx1ZScgfCAnZW51bScgfCAna2V5d29yZCcgfCAnc25pcHBldCcgfCAndGV4dCcgfCAnY29sb3InIHwgJ2ZpbGUnIHwgJ3JlZmVyZW5jZScgfCAnY3VzdG9tY29sb3InO1xuXG5cdC8qKiBOYW1lcyBvZiBjaGVja3N1bSBhbGdvcml0aG1zIHRoYXQgbWF5IGJlIHN1cHBvcnRlZCBieSBhIGRlYnVnIGFkYXB0ZXIuICovXG5cdGV4cG9ydCB0eXBlIENoZWNrc3VtQWxnb3JpdGhtID0gJ01ENScgfCAnU0hBMScgfCAnU0hBMjU2JyB8ICd0aW1lc3RhbXAnO1xuXG5cdC8qKiBUaGUgY2hlY2tzdW0gb2YgYW4gaXRlbSBjYWxjdWxhdGVkIGJ5IHRoZSBzcGVjaWZpZWQgYWxnb3JpdGhtLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIENoZWNrc3VtIHtcblx0XHQvKiogVGhlIGFsZ29yaXRobSB1c2VkIHRvIGNhbGN1bGF0ZSB0aGlzIGNoZWNrc3VtLiAqL1xuXHRcdGFsZ29yaXRobTogQ2hlY2tzdW1BbGdvcml0aG07XG5cdFx0LyoqIFZhbHVlIG9mIHRoZSBjaGVja3N1bS4gKi9cblx0XHRjaGVja3N1bTogc3RyaW5nO1xuXHR9XG5cblx0LyoqIFByb3ZpZGVzIGZvcm1hdHRpbmcgaW5mb3JtYXRpb24gZm9yIGEgdmFsdWUuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgVmFsdWVGb3JtYXQge1xuXHRcdC8qKiBEaXNwbGF5IHRoZSB2YWx1ZSBpbiBoZXguICovXG5cdFx0aGV4PzogYm9vbGVhbjtcblx0fVxuXG5cdC8qKiBQcm92aWRlcyBmb3JtYXR0aW5nIGluZm9ybWF0aW9uIGZvciBhIHN0YWNrIGZyYW1lLiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIFN0YWNrRnJhbWVGb3JtYXQgZXh0ZW5kcyBWYWx1ZUZvcm1hdCB7XG5cdFx0LyoqIERpc3BsYXlzIHBhcmFtZXRlcnMgZm9yIHRoZSBzdGFjayBmcmFtZS4gKi9cblx0XHRwYXJhbWV0ZXJzPzogYm9vbGVhbjtcblx0XHQvKiogRGlzcGxheXMgdGhlIHR5cGVzIG9mIHBhcmFtZXRlcnMgZm9yIHRoZSBzdGFjayBmcmFtZS4gKi9cblx0XHRwYXJhbWV0ZXJUeXBlcz86IGJvb2xlYW47XG5cdFx0LyoqIERpc3BsYXlzIHRoZSBuYW1lcyBvZiBwYXJhbWV0ZXJzIGZvciB0aGUgc3RhY2sgZnJhbWUuICovXG5cdFx0cGFyYW1ldGVyTmFtZXM/OiBib29sZWFuO1xuXHRcdC8qKiBEaXNwbGF5cyB0aGUgdmFsdWVzIG9mIHBhcmFtZXRlcnMgZm9yIHRoZSBzdGFjayBmcmFtZS4gKi9cblx0XHRwYXJhbWV0ZXJWYWx1ZXM/OiBib29sZWFuO1xuXHRcdC8qKiBEaXNwbGF5cyB0aGUgbGluZSBudW1iZXIgb2YgdGhlIHN0YWNrIGZyYW1lLiAqL1xuXHRcdGxpbmU/OiBib29sZWFuO1xuXHRcdC8qKiBEaXNwbGF5cyB0aGUgbW9kdWxlIG9mIHRoZSBzdGFjayBmcmFtZS4gKi9cblx0XHRtb2R1bGU/OiBib29sZWFuO1xuXHR9XG5cblx0LyoqIEFuIEV4Y2VwdGlvbk9wdGlvbnMgYXNzaWducyBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gYSBzZXQgb2YgZXhjZXB0aW9ucy4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBFeGNlcHRpb25PcHRpb25zIHtcblx0XHQvKiogQSBwYXRoIHRoYXQgc2VsZWN0cyBhIHNpbmdsZSBvciBtdWx0aXBsZSBleGNlcHRpb25zIGluIGEgdHJlZS4gSWYgJ3BhdGgnIGlzIG1pc3NpbmcsIHRoZSB3aG9sZSB0cmVlIGlzIHNlbGVjdGVkLiBCeSBjb252ZW50aW9uIHRoZSBmaXJzdCBzZWdtZW50IG9mIHRoZSBwYXRoIGlzIGEgY2F0ZWdvcnkgdGhhdCBpcyB1c2VkIHRvIGdyb3VwIGV4Y2VwdGlvbnMgaW4gdGhlIFVJLiAqL1xuXHRcdHBhdGg/OiBFeGNlcHRpb25QYXRoU2VnbWVudFtdO1xuXHRcdC8qKiBDb25kaXRpb24gd2hlbiBhIHRocm93biBleGNlcHRpb24gc2hvdWxkIHJlc3VsdCBpbiBhIGJyZWFrLiAqL1xuXHRcdGJyZWFrTW9kZTogRXhjZXB0aW9uQnJlYWtNb2RlO1xuXHR9XG5cblx0LyoqIFRoaXMgZW51bWVyYXRpb24gZGVmaW5lcyBhbGwgcG9zc2libGUgY29uZGl0aW9ucyB3aGVuIGEgdGhyb3duIGV4Y2VwdGlvbiBzaG91bGQgcmVzdWx0IGluIGEgYnJlYWsuXG5cdFx0bmV2ZXI6IG5ldmVyIGJyZWFrcyxcblx0XHRhbHdheXM6IGFsd2F5cyBicmVha3MsXG5cdFx0dW5oYW5kbGVkOiBicmVha3Mgd2hlbiBleGNwZXRpb24gdW5oYW5kbGVkLFxuXHRcdHVzZXJVbmhhbmRsZWQ6IGJyZWFrcyBpZiB0aGUgZXhjZXB0aW9uIGlzIG5vdCBoYW5kbGVkIGJ5IHVzZXIgY29kZS5cblx0Ki9cblx0ZXhwb3J0IHR5cGUgRXhjZXB0aW9uQnJlYWtNb2RlID0gJ25ldmVyJyB8ICdhbHdheXMnIHwgJ3VuaGFuZGxlZCcgfCAndXNlclVuaGFuZGxlZCc7XG5cblx0LyoqIEFuIEV4Y2VwdGlvblBhdGhTZWdtZW50IHJlcHJlc2VudHMgYSBzZWdtZW50IGluIGEgcGF0aCB0aGF0IGlzIHVzZWQgdG8gbWF0Y2ggbGVhZnMgb3Igbm9kZXMgaW4gYSB0cmVlIG9mIGV4Y2VwdGlvbnMuIElmIGEgc2VnbWVudCBjb25zaXN0cyBvZiBtb3JlIHRoYW4gb25lIG5hbWUsIGl0IG1hdGNoZXMgdGhlIG5hbWVzIHByb3ZpZGVkIGlmICduZWdhdGUnIGlzIGZhbHNlIG9yIG1pc3Npbmcgb3IgaXQgbWF0Y2hlcyBhbnl0aGluZyBleGNlcHQgdGhlIG5hbWVzIHByb3ZpZGVkIGlmICduZWdhdGUnIGlzIHRydWUuICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgRXhjZXB0aW9uUGF0aFNlZ21lbnQge1xuXHRcdC8qKiBJZiBmYWxzZSBvciBtaXNzaW5nIHRoaXMgc2VnbWVudCBtYXRjaGVzIHRoZSBuYW1lcyBwcm92aWRlZCwgb3RoZXJ3aXNlIGl0IG1hdGNoZXMgYW55dGhpbmcgZXhjZXB0IHRoZSBuYW1lcyBwcm92aWRlZC4gKi9cblx0XHRuZWdhdGU/OiBib29sZWFuO1xuXHRcdC8qKiBEZXBlbmRpbmcgb24gdGhlIHZhbHVlIG9mICduZWdhdGUnIHRoZSBuYW1lcyB0aGF0IHNob3VsZCBtYXRjaCBvciBub3QgbWF0Y2guICovXG5cdFx0bmFtZXM6IHN0cmluZ1tdO1xuXHR9XG5cblx0LyoqIERldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IGFuIGV4Y2VwdGlvbiB0aGF0IGhhcyBvY2N1cnJlZC4gKi9cblx0ZXhwb3J0IGludGVyZmFjZSBFeGNlcHRpb25EZXRhaWxzIHtcblx0XHQvKiogTWVzc2FnZSBjb250YWluZWQgaW4gdGhlIGV4Y2VwdGlvbi4gKi9cblx0XHRtZXNzYWdlPzogc3RyaW5nO1xuXHRcdC8qKiBTaG9ydCB0eXBlIG5hbWUgb2YgdGhlIGV4Y2VwdGlvbiBvYmplY3QuICovXG5cdFx0dHlwZU5hbWU/OiBzdHJpbmc7XG5cdFx0LyoqIEZ1bGx5LXF1YWxpZmllZCB0eXBlIG5hbWUgb2YgdGhlIGV4Y2VwdGlvbiBvYmplY3QuICovXG5cdFx0ZnVsbFR5cGVOYW1lPzogc3RyaW5nO1xuXHRcdC8qKiBPcHRpb25hbCBleHByZXNzaW9uIHRoYXQgY2FuIGJlIGV2YWx1YXRlZCBpbiB0aGUgY3VycmVudCBzY29wZSB0byBvYnRhaW4gdGhlIGV4Y2VwdGlvbiBvYmplY3QuICovXG5cdFx0ZXZhbHVhdGVOYW1lPzogc3RyaW5nO1xuXHRcdC8qKiBTdGFjayB0cmFjZSBhdCB0aGUgdGltZSB0aGUgZXhjZXB0aW9uIHdhcyB0aHJvd24uICovXG5cdFx0c3RhY2tUcmFjZT86IHN0cmluZztcblx0XHQvKiogRGV0YWlscyBvZiB0aGUgZXhjZXB0aW9uIGNvbnRhaW5lZCBieSB0aGlzIGV4Y2VwdGlvbiwgaWYgYW55LiAqL1xuXHRcdGlubmVyRXhjZXB0aW9uPzogRXhjZXB0aW9uRGV0YWlsc1tdO1xuXHR9XG59XG5cbiJdfQ==